--
-- this is ~/cheapthreads/ctc/backend.des
--
-- somewhat cleaned output from the defunctionalizer, produced from
-- Jason's transliterated back-end code
-- (in './Tests/SecureQ/Backend/backend.ct.hs')
--
-- put here 2009.12.30
--
-- Schulz
--




--
-- CODE AUTOMATICALLY GENERATED BY CT DEFUNCTIONALIZER
--
CS: current_state;
NS: next_state;

GENERICS:

INT_WIDTH, integer, 32;
ADDR_WIDTH, integer, 9;
DATA_WIDTH, integer 8;

-- constructed types:

NBRead, integer 2;
Valid, integer, 4;
Cont, integer, 8;

RspNBread 1;
RspValid 2;
Ack 4;





PORTS:

FSL_IN, in, std_logic_vector(0 to DATA_WIDTH-1);
FSL_OUT, out, std_logic_vector(0, DATA_WIDTH-1);
MSR_IN, in, std_logic_vector(0, DATA_WIDTH-1);   -- valid bit arrives via here
MSR_OUT, out, std_logic_vector(0, DATA_WIDTH-1); -- valid bit cleared via here

CONNECTIONS:

MEMS:

QF, DATA_WIDTH, ADDR_WIDTH, EXTERNAL;  -- queue for FE -> BE
QB, DATA_WIDTH, ADDR_WIDTH, EXTERNAL;  -- queue for BE -> FE
PEIP, DATA_WIDTH, ADDR_WIDTH, EXTERNAL; -- the PEIP shared memory



SIGS:


--
-- this is the value assigned by 'get' actions:
--
__retval, std_logic_vector(0 to INT_WIDTH - 1);


--
-- control variables in main:
--
Invalid, std_logic_vector(0 to INT_WIDTH - 1);
Arg, std_logic_vector(0 to INT_WIDTH - 1);


--
-- the back-end status structure:
--
ChanReqStatus1, std_logic_vector(0 to INT_WIDTH - 1);
ChanReqStatus2, std_logic_vector(0 to INT_WIDTH - 1);
ActiveChannel1, std_logic_vector(0 to INT_WIDTH - 1);
ActiveChannel2, std_logic_vector(0 to INT_WIDTH - 1);
CurrTransferValid_F, std_logic_vector(0 to INT_WIDTH - 1);
Exists_B, std_logic_vector(0 to INT_WIDTH - 1);
Ready_B, std_logic_vector(0 to INT_WIDTH - 1);
MaxTransferSize_B, std_logic_vector(0 to INT_WIDTH - 1);
CurrTransferSize_B, std_logic_vector(0 to INT_WIDTH - 1);
DestAddr_B, std_logic_vector(0 to INT_WIDTH - 1);


--
-- DMA signal register addresses (FE -> BE):
--
DMAMir_F, std_logic_vector(0 to INT_WIDTH - 1);
DMACtrl_F, std_logic_vector(0 to INT_WIDTH - 1);
SrcAddr_F, std_logic_vector(0 to INT_WIDTH - 1);
DestAddr_F, std_logic_vector(0 to INT_WIDTH - 1);
DMALength_F, std_logic_vector(0 to INT_WIDTH - 1);
DMAStatus_F, std_logic_vector(0 to INT_WIDTH - 1);
DMA_ISR_F, std_logic_vector(0 to INT_WIDTH - 1);
DMA_IER_F, std_logic_vector(0 to INT_WIDTH - 1);

--
-- DMA signal register addresses (BE -> FE):
--
DMAMir_B, std_logic_vector(0 to INT_WIDTH - 1);
DMACtrl_B, std_logic_vector(0 to INT_WIDTH - 1);
SrcAddr_B, std_logic_vector(0 to INT_WIDTH - 1);
DMALength_B, std_logic_vector(0 to INT_WIDTH - 1);
DMAStatus_B, std_logic_vector(0 to INT_WIDTH - 1);
DMA_ISR_B, std_logic_vector(0 to INT_WIDTH - 1);
DMA_IER_B, std_logic_vector(0 to INT_WIDTH - 1);


--
-- queue control signals: (FE -> BE)
--
QHead_F, std_logic_vector(0 to INT_WIDTH - 1);
QTail_F, std_logic_vector(0 to INT_WIDTH - 1);
ChanId_F, std_logic_vector(0 to INT_WIDTH - 1);
TransType_F, std_logic_vector(0 to INT_WIDTH - 1);
ReqCtrl_F, std_logic_vector(0 to INT_WIDTH - 1);
ReqSrcAddr_F, std_logic_vector(0 to INT_WIDTH - 1);
ReqDestAddr_F, std_logic_vector(0 to INT_WIDTH - 1);
ReqLength_F, std_logic_vector(0 to INT_WIDTH - 1);


--
-- queue control signals: (BE -> FE)
--
QHead_B, std_logic_vector(0 to INT_WIDTH - 1);
QTail_B, std_logic_vector(0 to INT_WIDTH - 1);
ChanId_B, std_logic_vector(0 to INT_WIDTH - 1);
TransType_B, std_logic_vector(0 to INT_WIDTH - 1);
ReqCtrl_B, std_logic_vector(0 to INT_WIDTH - 1);
ReqSrcAddr_B, std_logic_vector(0 to INT_WIDTH - 1);
ReqDestAddr_B, std_logic_vector(0 to INT_WIDTH - 1);
ReqLength_B, std_logic_vector(0 to INT_WIDTH - 1);


--
-- pointers to the PEIP interfaces:
--
PEIP_CMD_Header_In1, std_logic_vector(0 to INT_WIDTH - 1);
PEIP_CMD_Header_Out1, std_logic_vector(0 to INT_WIDTH - 1);
PEIP_Data_In1, std_logic_vector(0 to INT_WIDTH - 1);
PEIP_Data_Out1, std_logic_vector(0 to INT_WIDTH - 1);
PEIP_CMD_Header_In2, std_logic_vector(0 to INT_WIDTH - 1);
PEIP_CMD_Header_Out2, std_logic_vector(0 to INT_WIDTH - 1);
PEIP_Data_In2, std_logic_vector(0 to INT_WIDTH - 1);
PEIP_Data_Out2, std_logic_vector(0 to INT_WIDTH - 1);

--
-- local variables used in 'init':
--
Counter, std_logic_vector(0 to INT_WIDTH - 1);
DMA_Cfg_F, std_logic_vector(0 to INT_WIDTH - 1);
DMA_Cfg_B, std_logic_vector(0 to INT_WIDTH - 1);

--
-- local variables used in 'handle_reply':
--
Flags, std_logic_vector(0 to INT_WIDTH - 1);
FlagPointer, std_logic_vector(0 to INT_WIDTH - 1);
IsResponse1, std_logic_vector(0 to INT_WIDTH - 1);
IsResponse2, std_logic_vector(0 to INT_WIDTH - 1);


--
-- local variables used in 'handle_response':
--
HRspFlags, std_logic_vector(0 to INT_WIDTH - 1);
CmdReq, std_logic_vector(0 to INT_WIDTH - 1);

--
-- used in 'advance_fe_to_be_queue':
--
DMA_FDone_Msg, std_logic_vector(0 to INT_WIDTH - 1);

--
-- used in 'advance_be_to_fe_queue':
--
DMA_BDone_Msg, std_logic_vector(0 to INT_WIDTH - 1);

--
-- variables used in 'process_request':
--
OpCode, std_logic_vector(0 to INT_WIDTH - 1);


--
-- variables used in 'reserve_channel':
--
RCChannelId, std_logic_vector(0 to INT_WIDTH - 1);
RCMsg, std_logic_vector(0 to INT_WIDTH - 1);

--
-- used in 'fe_dma_request':
--
FDRMsg1, std_logic_vector(0 to INT_WIDTH - 1);
FDRMsg2, std_logic_vector(0 to INT_WIDTH - 1);
FDRChannelId, std_logic_vector(0 to INT_WIDTH - 1);
FDR_DMALength, std_logic_vector(0 to INT_WIDTH - 1);
FDR_DMAOffset, std_logic_vector(0 to INT_WIDTH - 1);
FDR_DMAAddress, std_logic_vector(0 to INT_WIDTH - 1);

--
--  used in 'fe_data_addr':
--
FSD_ChannelId, std_logic_vector(0 to INT_WIDTH - 1);
FSD_Msg1, std_logic_vector(0 to INT_WIDTH - 1);
FSD_Msg2, std_logic_vector(0 to INT_WIDTH - 1);
FSD_Msg3, std_logic_vector(0 to INT_WIDTH - 1);
FSD_Msg4, std_logic_vector(0 to INT_WIDTH - 1);
FSD_Msg5, std_logic_vector(0 to INT_WIDTH - 1);
FSD_CMDHeaderPtr, std_logic_vector(0 to INT_WIDTH - 1);
FSD_OriginalMsg, std_logic_vector(0 to INT_WIDTH - 1);
FDA_Msg1, std_logic_vector(0 to INT_WIDTH - 1);
FDA_DMALength, std_logic_vector(0 to INT_WIDTH - 1);
FDA_DestAddr, std_logic_vector(0 to INT_WIDTH - 1);
FDA_ChannelId, std_logic_vector(0 to INT_WIDTH - 1);

--
-- lambda-bound variables appearing in the source-code;
--
-- we use the convention that each identifier is suffixed
-- by the name of the source-level function it originally
-- appears in
--
n_prime_main, std_logic_vector(0 to INT_WIDTH - 1);
rsp_nbread_fsl, std_logic_vector(0 to INT_WIDTH - 1);
rsp_fsl_isinvalid, std_logic_vector(0 to INT_WIDTH - 1);
v_fsl_isinvalid, std_logic_vector(0 to INT_WIDTH - 1);
v_handle_reply1, std_logic_vector(0 to INT_WIDTH - 1);
a_handle_reply1, std_logic_vector(0 to INT_WIDTH - 1);
t_prime_enqueue_B, std_logic_vector(0 to INT_WIDTH - 1);
t_enqueue_B, std_logic_vector(0 to INT_WIDTH - 1);
i_enqueue_B, std_logic_vector(0 to INT_WIDTH - 1);
y_enqueue_B, std_logic_vector(0 to INT_WIDTH - 1);
c_enqueue_B, std_logic_vector(0 to INT_WIDTH - 1);
s_enqueue_B, std_logic_vector(0 to INT_WIDTH - 1);
d_enqueue_B, std_logic_vector(0 to INT_WIDTH - 1);
l_enqueue_B, std_logic_vector(0 to INT_WIDTH - 1);
a_prime_handle_reply1, std_logic_vector(0 to INT_WIDTH - 1);
l_handle_reply1, std_logic_vector(0 to INT_WIDTH - 1);
v_handle_reply2, std_logic_vector(0 to INT_WIDTH - 1);
a_handle_reply2, std_logic_vector(0 to INT_WIDTH - 1);
a_prime_handle_reply2, std_logic_vector(0 to INT_WIDTH - 1);
l_handle_reply2, std_logic_vector(0 to INT_WIDTH - 1);
cmd_is_response1, std_logic_vector(0 to INT_WIDTH - 1);
v_handle_response1, std_logic_vector(0 to INT_WIDTH - 1);
v_prime_handle_response1, std_logic_vector(0 to INT_WIDTH - 1);
a_handle_response1, std_logic_vector(0 to INT_WIDTH - 1);
cmd_is_response2, std_logic_vector(0 to INT_WIDTH - 1);
v_handle_response2, std_logic_vector(0 to INT_WIDTH - 1);
v_prime_handle_response2, std_logic_vector(0 to INT_WIDTH - 1);
a_handle_response2, std_logic_vector(0 to INT_WIDTH - 1);
b_advance_fe_to_be_queue, std_logic_vector(0 to INT_WIDTH - 1);
s_is_dma_available, std_logic_vector(0 to INT_WIDTH - 1);
m_is_dma_available, std_logic_vector(0 to INT_WIDTH - 1);
b_prime_advance_fe_to_be_queue, std_logic_vector(0 to INT_WIDTH - 1);
v_is_dma_error, std_logic_vector(0 to INT_WIDTH - 1);
b_prime_prime_advance_fe_to_be_queue, std_logic_vector(0 to INT_WIDTH - 1);
l_perform_dma_transfer, std_logic_vector(0 to INT_WIDTH - 1);
v_is_dma_done, std_logic_vector(0 to INT_WIDTH - 1);
e_advance_fe_to_be_queue, std_logic_vector(0 to INT_WIDTH - 1);
v0_advance_fe_to_be_queue, std_logic_vector(0 to INT_WIDTH - 1);
v_advance_fe_to_be_queue, std_logic_vector(0 to INT_WIDTH - 1);
v_prime_advance_fe_to_be_queue, std_logic_vector(0 to INT_WIDTH - 1);
v_prime_prime_advance_fe_to_be_queue, std_logic_vector(0 to INT_WIDTH - 1);
h_not_empty_F, std_logic_vector(0 to INT_WIDTH - 1);
t_not_empty_F, std_logic_vector(0 to INT_WIDTH - 1);
b_advance_be_to_fe_queue, std_logic_vector(0 to INT_WIDTH - 1);
b_prime_advance_be_to_fe_queue, std_logic_vector(0 to INT_WIDTH - 1);
i_prime_advance_be_to_fe_queue, std_logic_vector(0 to INT_WIDTH - 1);
v0_advance_be_to_fe_queue, std_logic_vector(0 to INT_WIDTH - 1);
v_advance_be_to_fe_queue, std_logic_vector(0 to INT_WIDTH - 1);
v_prime_advance_be_to_fe_queue, std_logic_vector(0 to INT_WIDTH - 1);
v_prime_prime_advance_be_to_fe_queue, std_logic_vector(0 to INT_WIDTH - 1);
u_advance_be_to_fe_queue, std_logic_vector(0 to INT_WIDTH - 1);
w_advance_be_to_fe_queue, std_logic_vector(0 to INT_WIDTH - 1);
w_prime_advance_be_to_fe_queue, std_logic_vector(0 to INT_WIDTH - 1);
t_prime_prime_prime_advance_be_to_fe_queue, std_logic_vector(0 to INT_WIDTH - 1);
t_advance_be_to_fe_queue, std_logic_vector(0 to INT_WIDTH - 1);
t_prime_advance_be_to_fe_queue, std_logic_vector(0 to INT_WIDTH - 1);
t_prime_prime_advance_be_to_fe_queue, std_logic_vector(0 to INT_WIDTH - 1);
i_advance_be_to_fe_queue, std_logic_vector(0 to INT_WIDTH - 1);
e_advance_be_to_fe_queue, std_logic_vector(0 to INT_WIDTH - 1);
a_advance_be_to_fe_queue, std_logic_vector(0 to INT_WIDTH - 1);
a_prime_advance_be_to_fe_queue, std_logic_vector(0 to INT_WIDTH - 1);
m_prime_prime_prime_advance_be_to_fe_queue, std_logic_vector(0 to INT_WIDTH - 1);
m_advance_be_to_fe_queue, std_logic_vector(0 to INT_WIDTH - 1);
m_prime_advance_be_to_fe_queue, std_logic_vector(0 to INT_WIDTH - 1);
m_prime_prime_advance_be_to_fe_queue, std_logic_vector(0 to INT_WIDTH - 1);
n_main, std_logic_vector(0 to INT_WIDTH - 1);
c_prime_process_request, std_logic_vector(0 to INT_WIDTH - 1);
c_process_request, std_logic_vector(0 to INT_WIDTH - 1);
i_prime_reserve_channel, std_logic_vector(0 to INT_WIDTH - 1);
t_reserve_channel, std_logic_vector(0 to INT_WIDTH - 1);
m_reserve_channel, std_logic_vector(0 to INT_WIDTH - 1);
m_fe_dma_request, std_logic_vector(0 to INT_WIDTH - 1);
i_fe_dma_request, std_logic_vector(0 to INT_WIDTH - 1);
m_prime_fe_dma_request, std_logic_vector(0 to INT_WIDTH - 1);
c_prime_fe_dma_request, std_logic_vector(0 to INT_WIDTH - 1);
l_fe_dma_request, std_logic_vector(0 to INT_WIDTH - 1);
l_prime_fe_dma_request, std_logic_vector(0 to INT_WIDTH - 1);
c_fe_dma_request, std_logic_vector(0 to INT_WIDTH - 1);
a_fe_dma_request, std_logic_vector(0 to INT_WIDTH - 1);
d_fe_dma_request, std_logic_vector(0 to INT_WIDTH - 1);
o_fe_dma_request, std_logic_vector(0 to INT_WIDTH - 1);
t_prime_enqueue_F, std_logic_vector(0 to INT_WIDTH - 1);
t_enqueue_F, std_logic_vector(0 to INT_WIDTH - 1);
i_enqueue_F, std_logic_vector(0 to INT_WIDTH - 1);
y_enqueue_F, std_logic_vector(0 to INT_WIDTH - 1);
c_enqueue_F, std_logic_vector(0 to INT_WIDTH - 1);
s_enqueue_F, std_logic_vector(0 to INT_WIDTH - 1);
d_enqueue_F, std_logic_vector(0 to INT_WIDTH - 1);
l_enqueue_F, std_logic_vector(0 to INT_WIDTH - 1);
m1_fe_segment_done, std_logic_vector(0 to INT_WIDTH - 1);
m2_fe_segment_done, std_logic_vector(0 to INT_WIDTH - 1);
m3_fe_segment_done, std_logic_vector(0 to INT_WIDTH - 1);
m4_fe_segment_done, std_logic_vector(0 to INT_WIDTH - 1);
m5_fe_segment_done, std_logic_vector(0 to INT_WIDTH - 1);
c_fe_segment_done, std_logic_vector(0 to INT_WIDTH - 1);
a_prime_prime_fe_segment_done, std_logic_vector(0 to INT_WIDTH - 1);
a_fe_segment_done, std_logic_vector(0 to INT_WIDTH - 1);
a_prime_fe_segment_done, std_logic_vector(0 to INT_WIDTH - 1);
o_fe_segment_done, std_logic_vector(0 to INT_WIDTH - 1);
m_fe_data_addr, std_logic_vector(0 to INT_WIDTH - 1);
a_fe_data_addr, std_logic_vector(0 to INT_WIDTH - 1);
l_fe_data_addr, std_logic_vector(0 to INT_WIDTH - 1);
a_prime_fe_data_addr, std_logic_vector(0 to INT_WIDTH - 1);
x_fe_data_addr, std_logic_vector(0 to INT_WIDTH - 1);
h_dequeue_F, std_logic_vector(0 to INT_WIDTH - 1);
i_dequeue_F, std_logic_vector(0 to INT_WIDTH - 1);
y_dequeue_F, std_logic_vector(0 to INT_WIDTH - 1);
c_dequeue_F, std_logic_vector(0 to INT_WIDTH - 1);
s_dequeue_F, std_logic_vector(0 to INT_WIDTH - 1);
d_dequeue_F, std_logic_vector(0 to INT_WIDTH - 1);
l_dequeue_F, std_logic_vector(0 to INT_WIDTH - 1);
h_dequeue_B, std_logic_vector(0 to INT_WIDTH - 1);
i_dequeue_B, std_logic_vector(0 to INT_WIDTH - 1);
y_dequeue_B, std_logic_vector(0 to INT_WIDTH - 1);
c_dequeue_B, std_logic_vector(0 to INT_WIDTH - 1);
s_dequeue_B, std_logic_vector(0 to INT_WIDTH - 1);
d_dequeue_B, std_logic_vector(0 to INT_WIDTH - 1);
l_dequeue_B, std_logic_vector(0 to INT_WIDTH - 1);
n_process_request, std_logic_vector(0 to INT_WIDTH - 1);
n_reserve_channel, std_logic_vector(0 to INT_WIDTH - 1);
n_fe_dma_request, std_logic_vector(0 to INT_WIDTH - 1);
n_fe_segment_done, std_logic_vector(0 to INT_WIDTH - 1);
n_fe_data_addr, std_logic_vector(0 to INT_WIDTH - 1);
n_get_command_header_in, std_logic_vector(0 to INT_WIDTH - 1);
n_get_command_header_out, std_logic_vector(0 to INT_WIDTH - 1);
n_get_data_in_address, std_logic_vector(0 to INT_WIDTH - 1);
n_get_data_out_address, std_logic_vector(0 to INT_WIDTH - 1);
op__set_opcode, std_logic_vector(0 to INT_WIDTH - 1);
x__set_opcode, std_logic_vector(0 to INT_WIDTH - 1);
ch__set_channel, std_logic_vector(0 to INT_WIDTH - 1);
x__set_channel, std_logic_vector(0 to INT_WIDTH - 1);
x__get_opcode, std_logic_vector(0 to INT_WIDTH - 1);
x__get_channel, std_logic_vector(0 to INT_WIDTH - 1);
i_form_channel_grant, std_logic_vector(0 to INT_WIDTH - 1);
i_form_channel_deny, std_logic_vector(0 to INT_WIDTH - 1);
x__get_dma_length, std_logic_vector(0 to INT_WIDTH - 1);
x__get_dma_offset, std_logic_vector(0 to INT_WIDTH - 1);
x__get_dma_address, std_logic_vector(0 to INT_WIDTH - 1);
n_form_be_segment_done, std_logic_vector(0 to INT_WIDTH - 1);


INITIAL: __GLOBAL__INIT;

TRANS:

PCL____GLOBAL__INIT -> PCI__0
{
}

PCI__296 -> PCL____GLOBAL__EXIT
{
}

PCI__0 -> PCI__1
{
__retval'  <=  0
DMAMir_F'  <=  (0 + 8)
DMACtrl_F'  <=  (0 + 16)
SrcAddr_F'  <=  (0 + 24)
DestAddr_F'  <=  (0 + 32)
DMALength_F'  <=  (0 + 40)
DMAStatus_F'  <=  (0 + 48)
DMA_ISR_F'  <=  (0 + 56)
DMA_IER_F'  <=  (0 + 64)
}

PCI__1 -> PCI__2
{
__retval'  <=  0
DMAMir_F'  <=  0
}

PCI__2 -> PCI__3
{
__retval'  <=  0
DMAMir_F'  <=  127
}

PCI__3 -> PCI__4
{
__retval'  <=  0
DMAMir_F'  <=  0
}

PCI__4 -> PCI__5
{
__retval'  <=  0
DestAddr_B'  <=  (0 + 32)
DMAMir_B'  <=  (0 + 8)
DMACtrl_B'  <=  (0 + 16)
SrcAddr_B'  <=  (0 + 24)
DMALength_B'  <=  (0 + 40)
DMAStatus_B'  <=  (0 + 48)
DMA_ISR_B'  <=  (0 + 56)
DMA_IER_B'  <=  (0 + 64)
}

PCI__5 -> PCI__6
{
__retval'  <=  0
DMAMir_F'  <=  0
}

PCI__6 -> PCI__7
{
__retval'  <=  0
DMAMir_F'  <=  127
}

PCI__7 -> PCI__8
{
__retval'  <=  0
DMAMir_F'  <=  0
}

PCI__8 -> PCI__9
{
__retval'  <=  0
CurrTransferValid_F'  <=  False
QHead_F'  <=  0
QTail_F'  <=  0
}

PCI__9 -> PCI__10
{
__retval'  <=  0
Exists_B'  <=  False
Ready_B'  <=  False
QHead_B'  <=  0
QTail_B'  <=  0
}

PCI__10 -> PCI__11
{
__retval'  <=  0
}

PCI__11 -> PCI__12
{
__retval'  <=  0
}

PCI__12 -> PCI__13
{
__retval'  <=  0
}

PCI__13 -> PCL__k
{
}

PCL__k -> PCI__14
{
}

PCI__14 -> PCI__15
{
__retval'  <=  0
Invalid'  <=  True
n_prime_main'  <=  0
}

PCI__15 -> PCL__k0
{
n_prime_main'  <=  0
}

PCL__k0 | (InvalidK)  -> PCI__16
{
n_prime_main'  <=  -1
}

PCL__k0 | (!(InvalidK))  -> PCI__118
{
n_prime_main'  <=  -1
}

PCI__16 -> PCI__17
{
__retval'  <=  FSL_IN
n_prime_main'  <=  FSL_IN
rsp_nbread_fsl'  <=  FSL_IN
}

PCI__17 -> PCI__18
{
__retval'  <=  0
Arg'  <=  rsp_nbread_fsl
n_prime_main'  <=  0
}

PCI__18 -> PCI__19
{
__retval'  <=  MSR_IN
n_prime_main'  <=  MSR_IN
rsp_fsl_isinvalid'  <=  MSR_IN
}

PCI__19 -> PCI__20
{
__retval'  <=  (1 = -1)
n_prime_main'  <=  (1 = -1)
v_fsl_isinvalid'  <=  0
}

PCI__20 -> PCL__k3
{
n_prime_main'  <=  0
}

PCL__k3 | ((ActiveChannel1) = 1)  -> PCI__21
{
n_prime_main'  <=  -1
}

PCL__k3 | ((ActiveChannel1) /= 1)  -> PCI__32
{
n_prime_main'  <=  -1
}

PCI__21 -> PCI__22
{
__retval'  <=  0
SrcAddr_B'  <=  PEIP_CMD_Header_In1
ChanId_B'  <=  1
TransType_B'  <=  0
ReqCtrl_B'  <=  (((((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2) OR 4 * 2) * 2) * 2) * 2) * 2) * 2) * 2)) OR 4)
ReqDestAddr_B'  <=  ((((9 * 256) + 9) * 16) + 9)
ReqLength_B'  <=  (5 * 4)
FlagPointer'  <=  (PEIP_CMD_Header_In1 + 3)
n_prime_main'  <=  0
v_handle_reply1'  <=  PEIP_CMD_Header_In1
a_handle_reply1'  <=  PEIP_CMD_Header_In1
}

PCI__22 -> PCI__23
{
__retval'  <=  QTail_B
QB[(QTail_B-(5*4))]'  <=   ReqLength_B
n_prime_main'  <=  QTail_B
t_prime_enqueue_B'  <=  QTail_B
t_enqueue_B'  <=  QTail_B
i_enqueue_B'  <=  ChanId_B
y_enqueue_B'  <=  TransType_B
c_enqueue_B'  <=  ReqCtrl_B
s_enqueue_B'  <=  ReqSrcAddr_B
d_enqueue_B'  <=  ReqDestAddr_B
l_enqueue_B'  <=  ReqLength_B
}

PCI__23 -> PCI__24
{
__retval'  <=  0
QTail_B'  <=  (t_prime_enqueue_B + (5 * 4))
n_prime_main'  <=  0
}

PCI__24 -> PCI__25
{
__retval'  <=  0
n_prime_main'  <=  0
}

PCI__25 -> PCL__k7
{
n_prime_main'  <=  0
}

PCL__k7 | (0 = ((FlagPointer) AND ((((((4 * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__26
{
n_prime_main'  <=  -1
}

PCL__k7 | (0 /= ((FlagPointer) AND ((((((4 * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__30
{
n_prime_main'  <=  -1
}

PCI__26 -> PCI__27
{
__retval'  <=  0
ChanId_B'  <=  1
TransType_B'  <=  0
ReqCtrl_B'  <=  (((((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2) OR (((((((4 * 2) * 2) * 2) * 2) * 2) * 2) * 2)) OR 4)
ReqSrcAddr_B'  <=  PEIP_CMD_Header_In1
ReqDestAddr_B'  <=  ((((9 * 256) + 9) * 16) + 9)
ReqLength_B'  <=  PEIP[(PEIP_CMD_Header_In1 + 2)]
n_prime_main'  <=  0
a_prime_handle_reply1'  <=  PEIP_CMD_Header_In1
l_handle_reply1'  <=  PEIP[(PEIP_CMD_Header_In1 + 2)]
}

PCI__27 -> PCI__28
{
__retval'  <=  QTail_B
QB[(QTail_B-(5*4))]'  <=   ReqLength_B
n_prime_main'  <=  QTail_B
t_prime_enqueue_B'  <=  QTail_B
t_enqueue_B'  <=  QTail_B
i_enqueue_B'  <=  ChanId_B
y_enqueue_B'  <=  TransType_B
c_enqueue_B'  <=  ReqCtrl_B
s_enqueue_B'  <=  ReqSrcAddr_B
d_enqueue_B'  <=  ReqDestAddr_B
l_enqueue_B'  <=  ReqLength_B
}

PCI__28 -> PCI__29
{
__retval'  <=  0
QTail_B'  <=  (t_prime_enqueue_B + (5 * 4))
n_prime_main'  <=  0
}

PCI__29 -> PCI__30
{
__retval'  <=  0
n_prime_main'  <=  0
}

PCI__30 -> PCI__31
{
__retval'  <=  0
n_prime_main'  <=  0
}

PCI__31 -> PCI__32
{
__retval'  <=  0
ActiveChannel1'  <=  0
n_prime_main'  <=  0
}

PCI__32 -> PCL__k4
{
n_prime_main'  <=  0
}

PCL__k4 | ((ActiveChannel2) = 1)  -> PCI__33
{
n_prime_main'  <=  -1
}

PCL__k4 | ((ActiveChannel2) /= 1)  -> PCI__44
{
n_prime_main'  <=  -1
}

PCI__33 -> PCI__34
{
__retval'  <=  0
SrcAddr_B'  <=  PEIP_CMD_Header_In2
ChanId_B'  <=  2
TransType_B'  <=  0
ReqCtrl_B'  <=  (((((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2) OR (((((((4 * 2) * 2) * 2) * 2) * 2) * 2) * 2)) OR 4)
ReqDestAddr_B'  <=  ((((9 * 256) + 9) * 16) + 9)
ReqLength_B'  <=  (5 * 4)
FlagPointer'  <=  (PEIP_CMD_Header_In2 + 3)
n_prime_main'  <=  0
v_handle_reply2'  <=  PEIP_CMD_Header_In2
a_handle_reply2'  <=  PEIP_CMD_Header_In2
}

PCI__34 -> PCI__35
{
__retval'  <=  QTail_B
QB[(QTail_B-(5*4))]'  <=   ReqLength_B
n_prime_main'  <=  QTail_B
t_prime_enqueue_B'  <=  QTail_B
t_enqueue_B'  <=  QTail_B
i_enqueue_B'  <=  ChanId_B
y_enqueue_B'  <=  TransType_B
c_enqueue_B'  <=  ReqCtrl_B
s_enqueue_B'  <=  ReqSrcAddr_B
d_enqueue_B'  <=  ReqDestAddr_B
l_enqueue_B'  <=  ReqLength_B
}

PCI__35 -> PCI__36
{
__retval'  <=  0
QTail_B'  <=  (t_prime_enqueue_B + (5 * 4))
n_prime_main'  <=  0
}

PCI__36 -> PCI__37
{
__retval'  <=  0
n_prime_main'  <=  0
}

PCI__37 -> PCL__k8
{
n_prime_main'  <=  0
}

PCL__k8 | (0 = ((FlagPointer) AND ((((((4 * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__38
{
n_prime_main'  <=  -1
}

PCL__k8 | (0 /= ((FlagPointer) AND ((((((4 * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__42
{
n_prime_main'  <=  -1
}

PCI__38 -> PCI__39
{
__retval'  <=  0
ChanId_B'  <=  2
TransType_B'  <=  0
ReqCtrl_B'  <=  (((((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2) OR (((((((4 * 2) * 2) * 2) * 2) * 2) * 2) * 2)) OR 4)
ReqSrcAddr_B'  <=  PEIP_CMD_Header_In2
ReqDestAddr_B'  <=  ((((9 * 256) + 9) * 16) + 9)
ReqLength_B'  <=  PEIP[(PEIP_CMD_Header_In2 + 2)]
n_prime_main'  <=  0
a_prime_handle_reply2'  <=  PEIP_CMD_Header_In2
l_handle_reply2'  <=  PEIP[(PEIP_CMD_Header_In2 + 2)]
}

PCI__39 -> PCI__40
{
__retval'  <=  QTail_B
QB[(QTail_B-(5*4))]'  <=   ReqLength_B
n_prime_main'  <=  QTail_B
t_prime_enqueue_B'  <=  QTail_B
t_enqueue_B'  <=  QTail_B
i_enqueue_B'  <=  ChanId_B
y_enqueue_B'  <=  TransType_B
c_enqueue_B'  <=  ReqCtrl_B
s_enqueue_B'  <=  ReqSrcAddr_B
d_enqueue_B'  <=  ReqDestAddr_B
l_enqueue_B'  <=  ReqLength_B
}

PCI__40 -> PCI__41
{
__retval'  <=  0
QTail_B'  <=  (t_prime_enqueue_B + (5 * 4))
n_prime_main'  <=  0
}

PCI__41 -> PCI__42
{
__retval'  <=  0
n_prime_main'  <=  0
}

PCI__42 -> PCI__43
{
__retval'  <=  0
n_prime_main'  <=  0
}

PCI__43 -> PCI__44
{
__retval'  <=  0
ActiveChannel2'  <=  0
n_prime_main'  <=  0
}

PCI__44 -> PCI__45
{
__retval'  <=  PEIP_CMD_Header_Out1
n_prime_main'  <=  PEIP_CMD_Header_Out1
cmd_is_response1'  <=  PEIP_CMD_Header_Out1
}

PCI__45 -> PCL__k9
{
n_prime_main'  <=  0
}

PCL__k9 | (!(0 = ((cmd_is_response1 + 3) AND (((((((1 * 2) * 2) * 2) * 2) * 2) * 2) * 2))))  -> PCI__46
{
n_prime_main'  <=  -1
}

PCL__k9 | (0 = ((cmd_is_response1 + 3) AND (((((((1 * 2) * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__47
{
n_prime_main'  <=  -1
}

PCI__46 -> PCI__47
{
n_prime_main'  <=  0
}

PCI__47 -> PCL__k10
{
n_prime_main'  <=  0
}

PCL__k10 | (0 = ((cmd_is_response1 + 3) AND (((((((1 * 2) * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__48
{
n_prime_main'  <=  -1
}

PCL__k10 | (0 /= ((cmd_is_response1 + 3) AND (((((((1 * 2) * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__49
{
n_prime_main'  <=  -1
}

PCI__48 -> PCI__49
{
n_prime_main'  <=  0
}

PCI__49 -> PCL__k5
{
n_prime_main'  <=  0
}

PCL__k5 | (IsResponse1)  -> PCI__50
{
n_prime_main'  <=  -1
}

PCL__k5 | (!(IsResponse1))  -> PCI__60
{
n_prime_main'  <=  -1
}

PCI__50 | (0 = (-1 AND ((((((4 * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__51
{
__retval'  <=  -1
ChanId_B'  <=  1
TransType_B'  <=  1
ReqCtrl_B'  <=  (((((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2) OR (((((((4 * 2) * 2) * 2) * 2) * 2) * 2) * 2)) OR 4)
ReqSrcAddr_B'  <=  PEIP_CMD_Header_Out1
ReqDestAddr_B'  <=  ((((9 + 9) * 16) + 9) * 256)
ReqLength_B'  <=  (5 * 4)
HRspFlags'  <=  (PEIP_CMD_Header_Out1 + 3)
n_prime_main'  <=  -1
v_handle_response1'  <=  PEIP_CMD_Header_Out1
v_prime_handle_response1'  <=  -1
}

PCI__50 | (0 /= (-1 AND ((((((4 * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__51
{
__retval'  <=  -1
ChanId_B'  <=  1
TransType_B'  <=  0
ReqCtrl_B'  <=  (((((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2) OR (((((((4 * 2) * 2) * 2) * 2) * 2) * 2) * 2)) OR 4)
ReqSrcAddr_B'  <=  PEIP_CMD_Header_Out1
ReqDestAddr_B'  <=  ((((9 + 9) * 16) + 9) * 256)
ReqLength_B'  <=  (5 * 4)
HRspFlags'  <=  (PEIP_CMD_Header_Out1 + 3)
n_prime_main'  <=  -1
v_handle_response1'  <=  PEIP_CMD_Header_Out1
v_prime_handle_response1'  <=  -1
}

PCI__51 -> PCI__52
{
__retval'  <=  QTail_B
QB[(QTail_B-(5*4))]'  <=   ReqLength_B
n_prime_main'  <=  QTail_B
t_prime_enqueue_B'  <=  QTail_B
t_enqueue_B'  <=  QTail_B
i_enqueue_B'  <=  ChanId_B
y_enqueue_B'  <=  TransType_B
c_enqueue_B'  <=  ReqCtrl_B
s_enqueue_B'  <=  ReqSrcAddr_B
d_enqueue_B'  <=  ReqDestAddr_B
l_enqueue_B'  <=  ReqLength_B
}

PCI__52 -> PCI__53
{
__retval'  <=  0
QTail_B'  <=  (t_prime_enqueue_B + (5 * 4))
n_prime_main'  <=  0
}

PCI__53 -> PCI__54
{
__retval'  <=  0
n_prime_main'  <=  0
}

PCI__54 -> PCL__k13
{
n_prime_main'  <=  0
}

PCL__k13 | (0 = (HRspFlags))  -> PCI__55
{
n_prime_main'  <=  -1
}

PCL__k13 | (0 /= (HRspFlags))  -> PCI__59
{
n_prime_main'  <=  -1
}

PCI__55 -> PCI__56
{
__retval'  <=  0
TransType_B'  <=  1
ReqCtrl_B'  <=  (((((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2) OR (((((((4 * 2) * 2) * 2) * 2) * 2) * 2) * 2)) OR 4)
ReqSrcAddr_B'  <=  PEIP_Data_Out1
ReqDestAddr_B'  <=  ((((9 * 256) + 9) * 16) + 9)
ReqLength_B'  <=  (PEIP_Data_Out1 + 2)
n_prime_main'  <=  0
a_handle_response1'  <=  PEIP_Data_Out1
}

PCI__56 -> PCI__57
{
__retval'  <=  QTail_B
QB[(QTail_B-(5*4))]'  <=   ReqLength_B
n_prime_main'  <=  QTail_B
t_prime_enqueue_B'  <=  QTail_B
t_enqueue_B'  <=  QTail_B
i_enqueue_B'  <=  ChanId_B
y_enqueue_B'  <=  TransType_B
c_enqueue_B'  <=  ReqCtrl_B
s_enqueue_B'  <=  ReqSrcAddr_B
d_enqueue_B'  <=  ReqDestAddr_B
l_enqueue_B'  <=  ReqLength_B
}

PCI__57 -> PCI__58
{
__retval'  <=  0
QTail_B'  <=  (t_prime_enqueue_B + (5 * 4))
n_prime_main'  <=  0
}

PCI__58 -> PCI__59
{
__retval'  <=  0
n_prime_main'  <=  0
}

PCI__59 -> PCI__60
{
__retval'  <=  0
n_prime_main'  <=  0
}

PCI__60 -> PCI__61
{
__retval'  <=  PEIP_CMD_Header_Out2
n_prime_main'  <=  PEIP_CMD_Header_Out2
cmd_is_response2'  <=  PEIP_CMD_Header_Out2
}

PCI__61 -> PCL__k11
{
n_prime_main'  <=  0
}

PCL__k11 | (!(0 = ((cmd_is_response2 + 3) AND (((((((1 * 2) * 2) * 2) * 2) * 2) * 2) * 2))))  -> PCI__62
{
n_prime_main'  <=  -1
}

PCL__k11 | (0 = ((cmd_is_response2 + 3) AND (((((((1 * 2) * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__63
{
n_prime_main'  <=  -1
}

PCI__62 -> PCI__63
{
n_prime_main'  <=  0
}

PCI__63 -> PCL__k12
{
n_prime_main'  <=  0
}

PCL__k12 | (0 = ((cmd_is_response2 + 3) AND (((((((1 * 2) * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__64
{
n_prime_main'  <=  -1
}

PCL__k12 | (0 /= ((cmd_is_response2 + 3) AND (((((((1 * 2) * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__65
{
n_prime_main'  <=  -1
}

PCI__64 -> PCI__65
{
n_prime_main'  <=  0
}

PCI__65 -> PCL__k6
{
n_prime_main'  <=  0
}

PCL__k6 | (IsResponse2)  -> PCI__66
{
n_prime_main'  <=  -1
}

PCL__k6 | (!(IsResponse2))  -> PCI__76
{
n_prime_main'  <=  -1
}

PCI__66 | (0 = (-1 AND ((((((4 * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__67
{
__retval'  <=  -1
ChanId_B'  <=  2
TransType_B'  <=  1
ReqCtrl_B'  <=  (((((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2) OR (((((((4 * 2) * 2) * 2) * 2) * 2) * 2) * 2)) OR 4)
ReqSrcAddr_B'  <=  PEIP_CMD_Header_Out2
ReqDestAddr_B'  <=  ((((9 + 9) * 16) + 9) * 256)
ReqLength_B'  <=  (5 * 4)
HRspFlags'  <=  (PEIP_CMD_Header_Out2 + 3)
n_prime_main'  <=  -1
v_handle_response2'  <=  PEIP_CMD_Header_Out2
v_prime_handle_response2'  <=  -1
}

PCI__66 | (0 /= (-1 AND ((((((4 * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__67
{
__retval'  <=  -1
ChanId_B'  <=  2
TransType_B'  <=  0
ReqCtrl_B'  <=  (((((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2) OR (((((((4 * 2) * 2) * 2) * 2) * 2) * 2) * 2)) OR 4)
ReqSrcAddr_B'  <=  PEIP_CMD_Header_Out2
ReqDestAddr_B'  <=  ((((9 + 9) * 16) + 9) * 256)
ReqLength_B'  <=  (5 * 4)
HRspFlags'  <=  (PEIP_CMD_Header_Out2 + 3)
n_prime_main'  <=  -1
v_handle_response2'  <=  PEIP_CMD_Header_Out2
v_prime_handle_response2'  <=  -1
}

PCI__67 -> PCI__68
{
__retval'  <=  QTail_B
QB[(QTail_B-(5*4))]'  <=   ReqLength_B
n_prime_main'  <=  QTail_B
t_prime_enqueue_B'  <=  QTail_B
t_enqueue_B'  <=  QTail_B
i_enqueue_B'  <=  ChanId_B
y_enqueue_B'  <=  TransType_B
c_enqueue_B'  <=  ReqCtrl_B
s_enqueue_B'  <=  ReqSrcAddr_B
d_enqueue_B'  <=  ReqDestAddr_B
l_enqueue_B'  <=  ReqLength_B
}

PCI__68 -> PCI__69
{
__retval'  <=  0
QTail_B'  <=  (t_prime_enqueue_B + (5 * 4))
n_prime_main'  <=  0
}

PCI__69 -> PCI__70
{
__retval'  <=  0
n_prime_main'  <=  0
}

PCI__70 -> PCL__k14
{
n_prime_main'  <=  0
}

PCL__k14 | (0 = (HRspFlags))  -> PCI__71
{
n_prime_main'  <=  -1
}

PCL__k14 | (0 /= (HRspFlags))  -> PCI__75
{
n_prime_main'  <=  -1
}

PCI__71 -> PCI__72
{
__retval'  <=  0
TransType_B'  <=  1
ReqCtrl_B'  <=  (((((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2) OR (((((((4 * 2) * 2) * 2) * 2) * 2) * 2) * 2)) OR 4)
ReqSrcAddr_B'  <=  PEIP_Data_Out2
ReqDestAddr_B'  <=  ((((9 * 256) + 9) * 16) + 9)
ReqLength_B'  <=  (PEIP_Data_Out2 + 2)
n_prime_main'  <=  0
a_handle_response2'  <=  PEIP_Data_Out2
}

PCI__72 -> PCI__73
{
__retval'  <=  QTail_B
QB[(QTail_B-(5*4))]'  <=   ReqLength_B
n_prime_main'  <=  QTail_B
t_prime_enqueue_B'  <=  QTail_B
t_enqueue_B'  <=  QTail_B
i_enqueue_B'  <=  ChanId_B
y_enqueue_B'  <=  TransType_B
c_enqueue_B'  <=  ReqCtrl_B
s_enqueue_B'  <=  ReqSrcAddr_B
d_enqueue_B'  <=  ReqDestAddr_B
l_enqueue_B'  <=  ReqLength_B
}

PCI__73 -> PCI__74
{
__retval'  <=  0
QTail_B'  <=  (t_prime_enqueue_B + (5 * 4))
n_prime_main'  <=  0
}

PCI__74 -> PCI__75
{
__retval'  <=  0
n_prime_main'  <=  0
}

PCI__75 -> PCI__76
{
__retval'  <=  0
n_prime_main'  <=  0
}

PCI__76 | (0 = (DMAStatus_B AND (((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__77
{
__retval'  <=  True
n_prime_main'  <=  True
b_advance_fe_to_be_queue'  <=  True
s_is_dma_available'  <=  DMAStatus_B
m_is_dma_available'  <=  (((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2)
}

PCI__76 | (0 /= (DMAStatus_B AND (((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__77
{
__retval'  <=  False
n_prime_main'  <=  False
b_advance_fe_to_be_queue'  <=  False
s_is_dma_available'  <=  DMAStatus_B
m_is_dma_available'  <=  (((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2)
}

PCI__77 | (0 = (DMA_ISR_F AND 2))  -> PCI__78
{
__retval'  <=  False
n_prime_main'  <=  False
b_prime_advance_fe_to_be_queue'  <=  False
v_is_dma_error'  <=  DMA_ISR_F
}

PCI__77 | (0 /= (DMA_ISR_F AND 2))  -> PCI__78
{
__retval'  <=  True
n_prime_main'  <=  True
b_prime_advance_fe_to_be_queue'  <=  True
v_is_dma_error'  <=  DMA_ISR_F
}

PCI__78 -> PCI__79
{
__retval'  <=  CurrTransferValid_F
n_prime_main'  <=  CurrTransferValid_F
b_prime_prime_advance_fe_to_be_queue'  <=  CurrTransferValid_F
}

PCI__79 -> PCL__k15
{
n_prime_main'  <=  0
b_prime_prime_advance_fe_to_be_queue'  <=  0
}

PCL__k15 | (b advance_fe_to_be_queue AND b_prime advance_fe_to_be_queue AND b_prime_prime advance_fe_to_be_queue)  -> PCI__80
{
n_prime_main'  <=  -1
b_prime_prime_advance_fe_to_be_queue'  <=  -1
}

PCL__k15 | (!(b advance_fe_to_be_queue) OR !(b_prime advance_fe_to_be_queue) OR !(b_prime_prime advance_fe_to_be_queue))  -> PCI__81
{
n_prime_main'  <=  -1
b_prime_prime_advance_fe_to_be_queue'  <=  -1
}

PCI__80 -> PCI__81
{
__retval'  <=  0
DMALength_F'  <=  ReqLength_F
n_prime_main'  <=  0
b_prime_prime_advance_fe_to_be_queue'  <=  0
l_perform_dma_transfer'  <=  ReqLength_F
}

PCI__81 | (0 = (DMA_ISR_F AND 1))  -> PCI__82
{
__retval'  <=  False
n_prime_main'  <=  False
b_prime_prime_advance_fe_to_be_queue'  <=  False
v_is_dma_done'  <=  DMA_ISR_F
}

PCI__81 | (0 /= (DMA_ISR_F AND 1))  -> PCI__82
{
__retval'  <=  True
n_prime_main'  <=  True
b_prime_prime_advance_fe_to_be_queue'  <=  True
v_is_dma_done'  <=  DMA_ISR_F
}

PCI__82 -> PCL__k16
{
n_prime_main'  <=  0
e_advance_fe_to_be_queue'  <=  0
}

PCL__k16 | (b advance_fe_to_be_queue AND !(b_prime advance_fe_to_be_queue) AND b_prime_prime advance_fe_to_be_queue AND CurrTransferValid_F)  -> PCI__83
{
n_prime_main'  <=  -1
e_advance_fe_to_be_queue'  <=  -1
}

PCL__k16 | (!(b advance_fe_to_be_queue) OR b_prime advance_fe_to_be_queue OR !(b_prime_prime advance_fe_to_be_queue) OR !(CurrTransferValid_F))  -> PCI__86
{
n_prime_main'  <=  -1
e_advance_fe_to_be_queue'  <=  -1
}

PCI__83 -> PCI__84
{
__retval'  <=  0
DMA_FDone_Msg'  <=  (((1 AND 255) <<< 16) OR -1)
n_prime_main'  <=  0
e_advance_fe_to_be_queue'  <=  0
v0_advance_fe_to_be_queue'  <=  0
v_advance_fe_to_be_queue'  <=  0
v_prime_advance_fe_to_be_queue'  <=  0
v_prime_prime_advance_fe_to_be_queue'  <=  0
}

PCI__84 -> PCI__85
{
FSL_OUT'  <=  (Ack)
n_prime_main'  <=  0
e_advance_fe_to_be_queue'  <=  0
}

PCI__85 -> PCI__86
{
__retval'  <=  0
CurrTransferValid_F'  <=  False
n_prime_main'  <=  0
e_advance_fe_to_be_queue'  <=  0
}

PCI__86 | (QHead_F = QTail_F)  -> PCI__87
{
__retval'  <=  False
n_prime_main'  <=  False
e_advance_fe_to_be_queue'  <=  False
h_not_empty_F'  <=  QHead_F
t_not_empty_F'  <=  QTail_F
}

PCI__86 | (QHead_F /= QTail_F)  -> PCI__87
{
__retval'  <=  True
n_prime_main'  <=  True
e_advance_fe_to_be_queue'  <=  True
h_not_empty_F'  <=  QHead_F
t_not_empty_F'  <=  QTail_F
}

PCI__87 -> PCL__k17
{
n_prime_main'  <=  0
}

PCL__k17 | (!(CurrTranfserValid_F) AND e advance_fe_to_be_queue)  -> PCI__88
{
n_prime_main'  <=  -1
}

PCL__k17 | (CurrTranfserValid_F OR !(e advance_fe_to_be_queue))  -> PCI__90
{
n_prime_main'  <=  -1
}

PCI__88 -> PCI__89
{
n_prime_main'  <=  0
}

PCI__89 -> PCI__90
{
__retval'  <=  0
DMALength_F'  <=  ReqLength_F
n_prime_main'  <=  0
l_perform_dma_transfer'  <=  ReqLength_F
}

PCI__90 -> PCI__91
{
__retval'  <=  0
n_prime_main'  <=  0
}

PCI__91 | (0 = (DMAStatus_B AND (((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__92
{
__retval'  <=  True
n_prime_main'  <=  True
s_is_dma_available'  <=  DMAStatus_B
m_is_dma_available'  <=  (((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2)
b_advance_be_to_fe_queue'  <=  True
}

PCI__91 | (0 /= (DMAStatus_B AND (((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__92
{
__retval'  <=  False
n_prime_main'  <=  False
s_is_dma_available'  <=  DMAStatus_B
m_is_dma_available'  <=  (((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2)
b_advance_be_to_fe_queue'  <=  False
}

PCI__92 | (0 = (DMA_ISR_F AND 2))  -> PCI__93
{
__retval'  <=  False
n_prime_main'  <=  False
v_is_dma_error'  <=  DMA_ISR_F
b_prime_advance_be_to_fe_queue'  <=  False
}

PCI__92 | (0 /= (DMA_ISR_F AND 2))  -> PCI__93
{
__retval'  <=  True
n_prime_main'  <=  True
v_is_dma_error'  <=  DMA_ISR_F
b_prime_advance_be_to_fe_queue'  <=  True
}

PCI__93 -> PCL__k18
{
n_prime_main'  <=  0
i_prime_advance_be_to_fe_queue'  <=  0
}

PCL__k18 | (b advance_be_to_fe_queue AND b_prime advance_be_to_fe_queue AND Exists_B)  -> PCI__94
{
n_prime_main'  <=  -1
i_prime_advance_be_to_fe_queue'  <=  -1
}

PCL__k18 | (!(b advance_be_to_fe_queue) OR !(b_prime advance_be_to_fe_queue) OR !(Exists_B))  -> PCI__95
{
n_prime_main'  <=  -1
i_prime_advance_be_to_fe_queue'  <=  -1
}

PCI__94 -> PCI__95
{
__retval'  <=  0
DMALength_F'  <=  ReqLength_F
n_prime_main'  <=  0
l_perform_dma_transfer'  <=  ReqLength_F
i_prime_advance_be_to_fe_queue'  <=  0
}

PCI__95 -> PCL__k19
{
n_prime_main'  <=  0
i_prime_advance_be_to_fe_queue'  <=  0
}

PCL__k19 | (b advance_be_to_fe_queue AND !(b_prime advance_be_to_fe_queue) AND b_prime_prime advance_be_to_fe_queue AND CurrTransferValid_F)  -> PCI__96
{
n_prime_main'  <=  -1
i_prime_advance_be_to_fe_queue'  <=  -1
}

PCL__k19 | (!(b advance_be_to_fe_queue) OR b_prime advance_be_to_fe_queue OR !(b_prime_prime advance_be_to_fe_queue) OR !(CurrTransferValid_F))  -> PCI__99
{
n_prime_main'  <=  -1
i_prime_advance_be_to_fe_queue'  <=  -1
}

PCI__96 -> PCI__97
{
__retval'  <=  0
DMALength_B'  <=  CurrTransferSize_B
DMA_BDone_Msg'  <=  (((1 AND 255) <<< 16) OR -1)
n_prime_main'  <=  0
i_prime_advance_be_to_fe_queue'  <=  0
v0_advance_be_to_fe_queue'  <=  0
v_advance_be_to_fe_queue'  <=  0
v_prime_advance_be_to_fe_queue'  <=  0
v_prime_prime_advance_be_to_fe_queue'  <=  0
u_advance_be_to_fe_queue'  <=  CurrTransferSize_B
}

PCI__97 -> PCI__98
{
FSL_OUT'  <=  (Ack)
n_prime_main'  <=  0
i_prime_advance_be_to_fe_queue'  <=  0
}

PCI__98 -> PCI__99
{
__retval'  <=  0
DMALength_B'  <=  (DMALength_B - CurrTransferSize_B)
n_prime_main'  <=  0
i_prime_advance_be_to_fe_queue'  <=  0
w_advance_be_to_fe_queue'  <=  DMALength_B
w_prime_advance_be_to_fe_queue'  <=  CurrTransferSize_B
}

PCI__99 -> PCL__k20
{
n_prime_main'  <=  0
i_prime_advance_be_to_fe_queue'  <=  0
}

PCL__k20 | (0 < (DMALength_B))  -> PCI__100
{
n_prime_main'  <=  -1
i_prime_advance_be_to_fe_queue'  <=  -1
}

PCL__k20 | (0 >= (DMALength_B))  -> PCI__102
{
n_prime_main'  <=  -1
i_prime_advance_be_to_fe_queue'  <=  -1
}

PCI__100 -> PCI__101
{
__retval'  <=  0
Ready_B'  <=  False
n_prime_main'  <=  0
i_prime_advance_be_to_fe_queue'  <=  0
t_prime_prime_prime_advance_be_to_fe_queue'  <=  0
t_advance_be_to_fe_queue'  <=  0
t_prime_advance_be_to_fe_queue'  <=  0
t_prime_prime_advance_be_to_fe_queue'  <=  0
}

PCI__101 -> PCI__102
{
FSL_OUT'  <=  (Ack)
n_prime_main'  <=  0
i_prime_advance_be_to_fe_queue'  <=  0
}

PCI__102 -> PCL__k21
{
n_prime_main'  <=  0
i_prime_advance_be_to_fe_queue'  <=  0
}

PCL__k21 | ((( ! (0 < (DMALength_B))) AND 1) = (TransType_B))  -> PCI__103
{
n_prime_main'  <=  -1
i_prime_advance_be_to_fe_queue'  <=  -1
}

PCL__k21 | ((( ! (0 < (DMALength_B))) AND 1) /= (TransType_B))  -> PCI__104
{
n_prime_main'  <=  -1
i_prime_advance_be_to_fe_queue'  <=  -1
}

PCI__103 -> PCI__104
{
__retval'  <=  ChanId_B
Exists_B'  <=  False
n_prime_main'  <=  ChanId_B
i_prime_advance_be_to_fe_queue'  <=  ChanId_B
i_advance_be_to_fe_queue'  <=  ChanId_B
}

PCI__104 -> PCL__k22
{
n_prime_main'  <=  0
e_advance_be_to_fe_queue'  <=  0
}

PCL__k22 | (((( ! (0 < (DMALength_B))) AND (1 = (TransType_B))) AND 1) = i_prime_advance_be_to_fe_queue)  -> PCI__105
{
n_prime_main'  <=  -1
e_advance_be_to_fe_queue'  <=  -1
}

PCL__k22 | (((( ! (0 < (DMALength_B))) AND (1 = (TransType_B))) AND 1) /= i_prime_advance_be_to_fe_queue)  -> PCI__108
{
n_prime_main'  <=  -1
e_advance_be_to_fe_queue'  <=  -1
}

PCI__105 -> PCI__106
{
n_prime_main'  <=  0
e_advance_be_to_fe_queue'  <=  0
a_advance_be_to_fe_queue'  <=  0
}

PCI__106 -> PCI__107
{
n_prime_main'  <=  0
e_advance_be_to_fe_queue'  <=  0
a_prime_advance_be_to_fe_queue'  <=  0
}

PCI__107 -> PCI__108
{
n_prime_main'  <=  0
e_advance_be_to_fe_queue'  <=  0
}

PCI__108 -> PCL__k23
{
n_prime_main'  <=  0
e_advance_be_to_fe_queue'  <=  0
}

PCL__k23 | (((( ! (0 < (DMALength_B))) AND (1 = (TransType_B))) AND 2) = i_prime_advance_be_to_fe_queue)  -> PCI__109
{
n_prime_main'  <=  -1
e_advance_be_to_fe_queue'  <=  -1
}

PCL__k23 | (((( ! (0 < (DMALength_B))) AND (1 = (TransType_B))) AND 2) /= i_prime_advance_be_to_fe_queue)  -> PCI__112
{
n_prime_main'  <=  -1
e_advance_be_to_fe_queue'  <=  -1
}

PCI__109 -> PCI__110
{
n_prime_main'  <=  0
e_advance_be_to_fe_queue'  <=  0
a_advance_be_to_fe_queue'  <=  0
}

PCI__110 -> PCI__111
{
n_prime_main'  <=  0
e_advance_be_to_fe_queue'  <=  0
a_prime_advance_be_to_fe_queue'  <=  0
}

PCI__111 -> PCI__112
{
n_prime_main'  <=  0
e_advance_be_to_fe_queue'  <=  0
}

PCI__112 -> PCL__k24
{
n_prime_main'  <=  0
}

PCL__k24 | (!(0 = ((Exists_B) AND e_advance_be_to_fe_queue)))  -> PCI__113
{
n_prime_main'  <=  -1
}

PCL__k24 | (0 = ((Exists_B) AND e_advance_be_to_fe_queue))  -> PCI__115
{
n_prime_main'  <=  -1
}

PCI__113 -> PCI__114
{
__retval'  <=  0
Exists_B'  <=  True
n_prime_main'  <=  0
m_prime_prime_prime_advance_be_to_fe_queue'  <=  0
m_advance_be_to_fe_queue'  <=  0
m_prime_advance_be_to_fe_queue'  <=  0
m_prime_prime_advance_be_to_fe_queue'  <=  0
}

PCI__114 -> PCI__115
{
FSL_OUT'  <=  (Ack)
n_prime_main'  <=  0
}

PCI__115 -> PCI__116
{
__retval'  <=  0
n_prime_main'  <=  0
}

PCI__116 -> PCI__117
{
__retval'  <=  0
n_prime_main'  <=  0
}

PCI__117 -> PCI__118
{
__retval'  <=  0
n_prime_main'  <=  0
}

PCI__118 -> PCI__119
{
__retval'  <=  0
c_prime_process_request'  <=  0
c_process_request'  <=  0
}

PCI__119 -> PCL__k25
{
}

PCL__k25 | (0 = c_prime_process_request)  -> PCI__120
{
}

PCL__k25 | (0 /= c_prime_process_request)  -> PCI__133
{
}

PCI__120 -> PCI__121
{
__retval'  <=  ((n_main >>> 16) AND 255)
i_prime_reserve_channel'  <=  ((n_main >>> 16) AND 255)
}

PCI__121 -> PCI__122
{
__retval'  <=  ChanReqStatus1
t_reserve_channel'  <=  ChanReqStatus1
}

PCI__122 -> PCL__k30
{
m_reserve_channel'  <=  0
}

PCL__k30 | (0 = t_reserve_channel)  -> PCI__123
{
m_reserve_channel'  <=  -1
}

PCL__k30 | (0 /= t_reserve_channel)  -> PCI__124
{
m_reserve_channel'  <=  -1
}

PCI__123 -> PCI__124
{
__retval'  <=  0
m_reserve_channel'  <=  0
}

PCI__124 -> PCL__k31
{
m_reserve_channel'  <=  0
}

PCL__k31 | (1 = t_reserve_channel)  -> PCI__125
{
m_reserve_channel'  <=  -1
}

PCL__k31 | (1 /= t_reserve_channel)  -> PCI__126
{
m_reserve_channel'  <=  -1
}

PCI__125 -> PCI__126
{
__retval'  <=  0
m_reserve_channel'  <=  0
}

PCI__126 -> PCL__k32
{
m_reserve_channel'  <=  0
}

PCL__k32 | (0 = t_reserve_channel)  -> PCI__127
{
m_reserve_channel'  <=  -1
}

PCL__k32 | (0 /= t_reserve_channel)  -> PCI__128
{
m_reserve_channel'  <=  -1
}

PCI__127 -> PCI__128
{
__retval'  <=  0
m_reserve_channel'  <=  0
}

PCI__128 -> PCL__k33
{
m_reserve_channel'  <=  0
}

PCL__k33 | (1 = t_reserve_channel)  -> PCI__129
{
m_reserve_channel'  <=  -1
}

PCL__k33 | (1 /= t_reserve_channel)  -> PCI__130
{
m_reserve_channel'  <=  -1
}

PCI__129 -> PCI__130
{
__retval'  <=  0
m_reserve_channel'  <=  0
}

PCI__130 -> PCI__131
{
__retval'  <=  RCMsg
m_reserve_channel'  <=  RCMsg
}

PCI__131 -> PCI__132
{
FSL_OUT'  <=  (Ack)
}

PCI__132 -> PCI__133
{
__retval'  <=  0
}

PCI__133 -> PCL__k26
{
}

PCL__k26 | (1 = c_prime_process_request)  -> PCI__134
{
}

PCL__k26 | (1 /= c_prime_process_request)  -> PCI__154
{
}

PCI__134 -> PCI__135
{
__retval'  <=  0
m_fe_dma_request'  <=  0
}

PCI__135 -> PCI__136
{
__retval'  <=  0
FDRChannelId'  <=  ((FDRChannelId >>> 16) AND 255)
m_fe_dma_request'  <=  0
i_fe_dma_request'  <=  FDRChannelId
}

PCI__136 -> PCI__137
{
__retval'  <=  FSL_IN
m_fe_dma_request'  <=  FSL_IN
}

PCI__137 -> PCI__138
{
__retval'  <=  0
m_prime_fe_dma_request'  <=  0
}

PCI__138 -> PCI__139
{
__retval'  <=  FSL_IN
m_prime_fe_dma_request'  <=  FSL_IN
}

PCI__139 -> PCI__140
{
__retval'  <=  0
c_prime_fe_dma_request'  <=  0
}

PCI__140 -> PCI__141
{
__retval'  <=  0
FDR_DMALength'  <=  ((FDRMsg1 >>> 0) AND (((15 + (15 * 16)) + (15 * 256)) + ((15 * 16) * 256)))
FDR_DMAOffset'  <=  ((FDRMsg1 >>> 16) AND (((15 + (15 * 16)) + (15 * 256)) + ((15 * 16) * 256)))
FDR_DMAAddress'  <=  FDRMsg2
c_prime_fe_dma_request'  <=  0
l_fe_dma_request'  <=  FDRMsg1
l_prime_fe_dma_request'  <=  FDRMsg2
}

PCI__141 -> PCI__142
{
__retval'  <=  FDRChannelId
ChanId_F'  <=  FDRChannelId
TransType_F'  <=  0
ReqCtrl_F'  <=  (((((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2) OR (((((((4 * 2) * 2) * 2) * 2) * 2) * 2) * 2)) OR 4)
ReqSrcAddr_F'  <=  FDRMsg1
c_prime_fe_dma_request'  <=  FDRChannelId
l_prime_fe_dma_request'  <=  FDR_DMALength
c_fe_dma_request'  <=  FDRChannelId
a_fe_dma_request'  <=  FDRMsg1
}

PCI__142 -> PCL__k34
{
}

PCL__k34 | (1 = c_prime_fe_dma_request)  -> PCI__143
{
}

PCL__k34 | (1 /= c_prime_fe_dma_request)  -> PCI__146
{
}

PCI__143 -> PCI__144
{
d_fe_dma_request'  <=  0
}

PCI__144 -> PCI__145
{
o_fe_dma_request'  <=  0
}

PCI__145 -> PCI__146
{
}

PCI__146 -> PCL__k35
{
}

PCL__k35 | (2 = c_prime_fe_dma_request)  -> PCI__147
{
}

PCL__k35 | (2 /= c_prime_fe_dma_request)  -> PCI__150
{
}

PCI__147 -> PCI__148
{
d_fe_dma_request'  <=  0
}

PCI__148 -> PCI__149
{
o_fe_dma_request'  <=  0
}

PCI__149 -> PCI__150
{
}

PCI__150 -> PCI__151
{
__retval'  <=  QTail_F
QF[(QTail_F-(5*4))]'  <=   ReqLength_F
t_prime_enqueue_F'  <=  QTail_F
t_enqueue_F'  <=  QTail_F
i_enqueue_F'  <=  ChanId_F
y_enqueue_F'  <=  TransType_F
c_enqueue_F'  <=  ReqCtrl_F
s_enqueue_F'  <=  ReqSrcAddr_F
d_enqueue_F'  <=  ReqDestAddr_F
l_enqueue_F'  <=  ReqLength_F
}

PCI__151 -> PCI__152
{
__retval'  <=  0
QTail_B'  <=  (t_prime_enqueue_F + (5 * 4))
}

PCI__152 -> PCI__153
{
__retval'  <=  0
}

PCI__153 -> PCI__154
{
__retval'  <=  0
}

PCI__154 -> PCL__k27
{
}

PCL__k27 | (2 = c_prime_process_request)  -> PCI__155
{
}

PCL__k27 | (2 /= c_prime_process_request)  -> PCI__179
{
}

PCI__155 -> PCI__156
{
__retval'  <=  FSL_IN
m1_fe_segment_done'  <=  FSL_IN
}

PCI__156 -> PCI__157
{
__retval'  <=  0
m2_fe_segment_done'  <=  0
}

PCI__157 -> PCI__158
{
__retval'  <=  FSL_IN
m2_fe_segment_done'  <=  FSL_IN
}

PCI__158 -> PCI__159
{
__retval'  <=  0
m3_fe_segment_done'  <=  0
}

PCI__159 -> PCI__160
{
__retval'  <=  FSL_IN
m3_fe_segment_done'  <=  FSL_IN
}

PCI__160 -> PCI__161
{
__retval'  <=  0
m4_fe_segment_done'  <=  0
}

PCI__161 -> PCI__162
{
__retval'  <=  FSL_IN
m4_fe_segment_done'  <=  FSL_IN
}

PCI__162 -> PCI__163
{
__retval'  <=  0
m5_fe_segment_done'  <=  0
}

PCI__163 -> PCI__164
{
__retval'  <=  FSL_IN
m5_fe_segment_done'  <=  FSL_IN
}

PCI__164 -> PCI__165
{
__retval'  <=  0
c_fe_segment_done'  <=  0
}

PCI__165 -> PCI__166
{
__retval'  <=  0
FSD_ChannelId'  <=  ((n_main >>> 16) AND 255)
c_fe_segment_done'  <=  0
}

PCI__166 -> PCL__k36
{
a_prime_prime_fe_segment_done'  <=  0
}

PCL__k36 | (1 = c_fe_segment_done)  -> PCI__167
{
a_prime_prime_fe_segment_done'  <=  -1
}

PCL__k36 | (1 /= c_fe_segment_done)  -> PCI__170
{
a_prime_prime_fe_segment_done'  <=  -1
}

PCI__167 -> PCI__168
{
a_prime_prime_fe_segment_done'  <=  0
a_fe_segment_done'  <=  0
}

PCI__168 -> PCI__169
{
a_prime_prime_fe_segment_done'  <=  0
a_fe_segment_done'  <=  0
}

PCI__169 -> PCI__170
{
a_prime_prime_fe_segment_done'  <=  0
}

PCI__170 -> PCL__k37
{
a_prime_prime_fe_segment_done'  <=  0
}

PCL__k37 | (2 = c_fe_segment_done)  -> PCI__171
{
a_prime_prime_fe_segment_done'  <=  -1
}

PCL__k37 | (2 /= c_fe_segment_done)  -> PCI__174
{
a_prime_prime_fe_segment_done'  <=  -1
}

PCI__171 -> PCI__172
{
a_prime_prime_fe_segment_done'  <=  0
a_fe_segment_done'  <=  0
}

PCI__172 -> PCI__173
{
a_prime_prime_fe_segment_done'  <=  0
a_fe_segment_done'  <=  0
}

PCI__173 -> PCI__174
{
a_prime_prime_fe_segment_done'  <=  0
}

PCI__174 -> PCI__175
{
__retval'  <=  0
FSD_Msg3'  <=  (FSD_Msg3 AND ( ~ (((((((1 * 2) * 2) * 2) * 2) * 2) * 2) * 2)))
FSD_OriginalMsg'  <=  FSD_Msg3
m3_fe_segment_done'  <=  FSD_Msg3
a_prime_prime_fe_segment_done'  <=  0
}

PCI__175 -> PCI__176
{
__retval'  <=  FSD_CMDHeaderPtr
PEIP[(FSD_CMDHeaderPtr-5)]'  <=   FSD_Msg4
m1_fe_segment_done'  <=  FSD_Msg1
m2_fe_segment_done'  <=  FSD_Msg2
m3_fe_segment_done'  <=  FSD_Msg3
m4_fe_segment_done'  <=  FSD_Msg4
m5_fe_segment_done'  <=  FSD_Msg5
a_prime_prime_fe_segment_done'  <=  FSD_CMDHeaderPtr
a_prime_fe_segment_done'  <=  FSD_CMDHeaderPtr
}

PCI__176 -> PCI__177
{
__retval'  <=  FSD_OriginalMsg
PEIP[(a_prime_prime fe_segment_done-3)]'  <=   FSD_OriginalMsg
o_fe_segment_done'  <=  FSD_OriginalMsg
}

PCI__177 -> PCI__178
{
FSL_OUT'  <=  (((c_fe_segment_done AND 255) <<< 16) OR (((6 AND 255) <<< 24) OR 0))
}

PCI__178 -> PCI__179
{
__retval'  <=  0
}

PCI__179 -> PCL__k28
{
}

PCL__k28 | (3 = c_prime_process_request)  -> PCI__180
{
}

PCL__k28 | (3 /= c_prime_process_request)  -> PCI__194
{
}

PCI__180 -> PCI__181
{
__retval'  <=  0
FDA_DMALength'  <=  ((n_main >>> 0) AND (((15 + (15 * 16)) + (15 * 256)) + ((15 * 16) * 256)))
FDA_ChannelId'  <=  ((n_main >>> 16) AND 255)
m_fe_data_addr'  <=  0
}

PCI__181 -> PCI__182
{
FSL_OUT'  <=  (BRead)
m_fe_data_addr'  <=  0
}

PCI__182 -> PCI__183
{
__retval'  <=  0
FDA_Msg1'  <=  m_fe_data_addr
FDA_DestAddr'  <=  m_fe_data_addr
a_fe_data_addr'  <=  0
l_fe_data_addr'  <=  FDA_DMALength
}

PCI__183 -> PCL__k38
{
}

PCL__k38 | (Exists_B AND (DMALength_B) > (MaxTransferSize_B))  -> PCI__184
{
}

PCL__k38 | (!(Exists_B) OR (DMALength_B) <= (MaxTransferSize_B))  -> PCI__188
{
}

PCI__184 -> PCI__185
{
a_prime_fe_data_addr'  <=  0
}

PCI__185 -> PCI__186
{
x_fe_data_addr'  <=  0
}

PCI__186 -> PCI__187
{
x_fe_data_addr'  <=  0
}

PCI__187 -> PCI__188
{
}

PCI__188 -> PCI__189
{
}

PCL__k39 | (Exists_B AND !((DMALength_B) > (MaxTransferSize_B)))  -> PCI__189
{
}

PCL__k39 | (!(Exists_B) OR (DMALength_B) > (MaxTransferSize_B))  -> PCI__193
{
}

PCI__189 -> PCI__190
{
a_prime_fe_data_addr'  <=  0
}

PCI__190 -> PCI__191
{
x_fe_data_addr'  <=  0
}

PCI__191 -> PCI__192
{
x_fe_data_addr'  <=  0
}

PCI__192 -> PCI__193
{
}

PCI__193 -> PCI__194
{
__retval'  <=  0
}

PCI__194 -> PCL__k29
{
}

PCL__k29 | (!(0 = c_prime_process_request OR 1 = c_prime_process_request OR 2 = c_prime_process_request OR 3 = c_prime_process_request))  -> PCI__195
{
}

PCL__k29 | (0 = c_prime_process_request OR 1 = c_prime_process_request OR 2 = c_prime_process_request OR 3 = c_prime_process_request)  -> PCI__196
{
}

PCI__195 -> PCI__196
{
__retval'  <=  0
}

PCI__196 -> PCI__197
{
__retval'  <=  0
}

PCI__197 -> PCL__k3
{
}

PCL__k3 | ((ActiveChannel1) = 1)  -> PCI__198
{
}

PCL__k3 | ((ActiveChannel1) /= 1)  -> PCI__209
{
}

PCI__198 -> PCI__199
{
__retval'  <=  0
SrcAddr_B'  <=  PEIP_CMD_Header_In1
ChanId_B'  <=  1
TransType_B'  <=  0
ReqCtrl_B'  <=  (((((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2) OR (((((((4 * 2) * 2) * 2) * 2) * 2) * 2) * 2)) OR 4)
ReqDestAddr_B'  <=  ((((9 * 256) + 9) * 16) + 9)
ReqLength_B'  <=  (5 * 4)
FlagPointer'  <=  (PEIP_CMD_Header_In1 + 3)
v_handle_reply1'  <=  PEIP_CMD_Header_In1
a_handle_reply1'  <=  PEIP_CMD_Header_In1
}

PCI__199 -> PCI__200
{
__retval'  <=  QTail_B
QB[(QTail_B-(5*4))]'  <=   ReqLength_B
t_prime_enqueue_B'  <=  QTail_B
t_enqueue_B'  <=  QTail_B
i_enqueue_B'  <=  ChanId_B
y_enqueue_B'  <=  TransType_B
c_enqueue_B'  <=  ReqCtrl_B
s_enqueue_B'  <=  ReqSrcAddr_B
d_enqueue_B'  <=  ReqDestAddr_B
l_enqueue_B'  <=  ReqLength_B
}

PCI__200 -> PCI__201
{
__retval'  <=  0
QTail_B'  <=  (t_prime_enqueue_B + (5 * 4))
}

PCI__201 -> PCI__202
{
__retval'  <=  0
}

PCI__202 -> PCL__k7
{
}

PCL__k7 | (0 = ((FlagPointer) AND ((((((4 * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__203
{
}

PCL__k7 | (0 /= ((FlagPointer) AND ((((((4 * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__207
{
}

PCI__203 -> PCI__204
{
__retval'  <=  0
ChanId_B'  <=  1
TransType_B'  <=  0
ReqCtrl_B'  <=  (((((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2) OR (((((((4 * 2) * 2) * 2) * 2) * 2) * 2) * 2)) OR 4)
ReqSrcAddr_B'  <=  PEIP_CMD_Header_In1
ReqDestAddr_B'  <=  ((((9 * 256) + 9) * 16) + 9)
ReqLength_B'  <=  PEIP[(PEIP_CMD_Header_In1 + 2)]
a_prime_handle_reply1'  <=  PEIP_CMD_Header_In1
l_handle_reply1'  <=  PEIP[(PEIP_CMD_Header_In1 + 2)]
}

PCI__204 -> PCI__205
{
__retval'  <=  QTail_B
QB[(QTail_B-(5*4))]'  <=   ReqLength_B
t_prime_enqueue_B'  <=  QTail_B
t_enqueue_B'  <=  QTail_B
i_enqueue_B'  <=  ChanId_B
y_enqueue_B'  <=  TransType_B
c_enqueue_B'  <=  ReqCtrl_B
s_enqueue_B'  <=  ReqSrcAddr_B
d_enqueue_B'  <=  ReqDestAddr_B
l_enqueue_B'  <=  ReqLength_B
}

PCI__205 -> PCI__206
{
__retval'  <=  0
QTail_B'  <=  (t_prime_enqueue_B + (5 * 4))
}

PCI__206 -> PCI__207
{
__retval'  <=  0
}

PCI__207 -> PCI__208
{
__retval'  <=  0
}

PCI__208 -> PCI__209
{
__retval'  <=  0
ActiveChannel1'  <=  0
}

PCI__209 -> PCL__k4
{
}

PCL__k4 | ((ActiveChannel2) = 1)  -> PCI__210
{
}

PCL__k4 | ((ActiveChannel2) /= 1)  -> PCI__221
{
}

PCI__210 -> PCI__211
{
__retval'  <=  0
SrcAddr_B'  <=  PEIP_CMD_Header_In2
ChanId_B'  <=  2
TransType_B'  <=  0
ReqCtrl_B'  <=  (((((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2) OR (((((((4 * 2) * 2) * 2) * 2) * 2) * 2) * 2)) OR 4)
ReqDestAddr_B'  <=  ((((9 * 256) + 9) * 16) + 9)
ReqLength_B'  <=  (5 * 4)
FlagPointer'  <=  (PEIP_CMD_Header_In2 + 3)
v_handle_reply2'  <=  PEIP_CMD_Header_In2
a_handle_reply2'  <=  PEIP_CMD_Header_In2
}

PCI__211 -> PCI__212
{
__retval'  <=  QTail_B
QB[(QTail_B-(5*4))]'  <=   ReqLength_B
t_prime_enqueue_B'  <=  QTail_B
t_enqueue_B'  <=  QTail_B
i_enqueue_B'  <=  ChanId_B
y_enqueue_B'  <=  TransType_B
c_enqueue_B'  <=  ReqCtrl_B
s_enqueue_B'  <=  ReqSrcAddr_B
d_enqueue_B'  <=  ReqDestAddr_B
l_enqueue_B'  <=  ReqLength_B
}

PCI__212 -> PCI__213
{
__retval'  <=  0
QTail_B'  <=  (t_prime_enqueue_B + (5 * 4))
}

PCI__213 -> PCI__214
{
__retval'  <=  0
}

PCI__214 -> PCL__k8
{
}

PCL__k8 | (0 = ((FlagPointer) AND ((((((4 * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__215
{
}

PCL__k8 | (0 /= ((FlagPointer) AND ((((((4 * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__219
{
}

PCI__215 -> PCI__216
{
__retval'  <=  0
ChanId_B'  <=  2
TransType_B'  <=  0
ReqCtrl_B'  <=  (((((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2) OR (((((((4 * 2) * 2) * 2) * 2) * 2) * 2) * 2)) OR 4)
ReqSrcAddr_B'  <=  PEIP_CMD_Header_In2
ReqDestAddr_B'  <=  ((((9 * 256) + 9) * 16) + 9)
ReqLength_B'  <=  PEIP[(PEIP_CMD_Header_In2 + 2)]
a_prime_handle_reply2'  <=  PEIP_CMD_Header_In2
l_handle_reply2'  <=  PEIP[(PEIP_CMD_Header_In2 + 2)]
}

PCI__216 -> PCI__217
{
__retval'  <=  QTail_B
QB[(QTail_B-(5*4))]'  <=   ReqLength_B
t_prime_enqueue_B'  <=  QTail_B
t_enqueue_B'  <=  QTail_B
i_enqueue_B'  <=  ChanId_B
y_enqueue_B'  <=  TransType_B
c_enqueue_B'  <=  ReqCtrl_B
s_enqueue_B'  <=  ReqSrcAddr_B
d_enqueue_B'  <=  ReqDestAddr_B
l_enqueue_B'  <=  ReqLength_B
}

PCI__217 -> PCI__218
{
__retval'  <=  0
QTail_B'  <=  (t_prime_enqueue_B + (5 * 4))
}

PCI__218 -> PCI__219
{
__retval'  <=  0
}

PCI__219 -> PCI__220
{
__retval'  <=  0
}

PCI__220 -> PCI__221
{
__retval'  <=  0
ActiveChannel2'  <=  0
}

PCI__221 -> PCI__222
{
__retval'  <=  PEIP_CMD_Header_Out1
cmd_is_response1'  <=  PEIP_CMD_Header_Out1
}

PCI__222 -> PCL__k9
{
}

PCL__k9 | (!(0 = ((cmd_is_response1 + 3) AND (((((((1 * 2) * 2) * 2) * 2) * 2) * 2) * 2))))  -> PCI__223
{
}

PCL__k9 | (0 = ((cmd_is_response1 + 3) AND (((((((1 * 2) * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__224
{
}

PCI__223 -> PCI__224
{
}

PCI__224 -> PCL__k10
{
}

PCL__k10 | (0 = ((cmd_is_response1 + 3) AND (((((((1 * 2) * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__225
{
}

PCL__k10 | (0 /= ((cmd_is_response1 + 3) AND (((((((1 * 2) * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__226
{
}

PCI__225 -> PCI__226
{
}

PCI__226 -> PCL__k5
{
}

PCL__k5 | (IsResponse1)  -> PCI__227
{
}

PCL__k5 | (!(IsResponse1))  -> PCI__237
{
}

PCI__227 | (0 = (-1 AND ((((((4 * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__228
{
__retval'  <=  -1
ChanId_B'  <=  1
TransType_B'  <=  1
ReqCtrl_B'  <=  (((((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2) OR (((((((4 * 2) * 2) * 2) * 2) * 2) * 2) * 2)) OR 4)
ReqSrcAddr_B'  <=  PEIP_CMD_Header_Out1
ReqDestAddr_B'  <=  ((((9 + 9) * 16) + 9) * 256)
ReqLength_B'  <=  (5 * 4)
HRspFlags'  <=  (PEIP_CMD_Header_Out1 + 3)
v_handle_response1'  <=  PEIP_CMD_Header_Out1
v_prime_handle_response1'  <=  -1
}

PCI__227 | (0 /= (-1 AND ((((((4 * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__228
{
__retval'  <=  -1
ChanId_B'  <=  1
TransType_B'  <=  0
ReqCtrl_B'  <=  (((((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2) OR (((((((4 * 2) * 2) * 2) * 2) * 2) * 2) * 2)) OR 4)
ReqSrcAddr_B'  <=  PEIP_CMD_Header_Out1
ReqDestAddr_B'  <=  ((((9 + 9) * 16) + 9) * 256)
ReqLength_B'  <=  (5 * 4)
HRspFlags'  <=  (PEIP_CMD_Header_Out1 + 3)
v_handle_response1'  <=  PEIP_CMD_Header_Out1
v_prime_handle_response1'  <=  -1
}

PCI__228 -> PCI__229
{
__retval'  <=  QTail_B
QB[(QTail_B-(5*4))]'  <=   ReqLength_B
t_prime_enqueue_B'  <=  QTail_B
t_enqueue_B'  <=  QTail_B
i_enqueue_B'  <=  ChanId_B
y_enqueue_B'  <=  TransType_B
c_enqueue_B'  <=  ReqCtrl_B
s_enqueue_B'  <=  ReqSrcAddr_B
d_enqueue_B'  <=  ReqDestAddr_B
l_enqueue_B'  <=  ReqLength_B
}

PCI__229 -> PCI__230
{
__retval'  <=  0
QTail_B'  <=  (t_prime_enqueue_B + (5 * 4))
}

PCI__230 -> PCI__231
{
__retval'  <=  0
}

PCI__231 -> PCL__k13
{
}

PCL__k13 | (0 = (HRspFlags))  -> PCI__232
{
}

PCL__k13 | (0 /= (HRspFlags))  -> PCI__236
{
}

PCI__232 -> PCI__233
{
__retval'  <=  0
TransType_B'  <=  1
ReqCtrl_B'  <=  (((((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2) OR (((((((4 * 2) * 2) * 2) * 2) * 2) * 2) * 2)) OR 4)
ReqSrcAddr_B'  <=  PEIP_Data_Out1
ReqDestAddr_B'  <=  ((((9 * 256) + 9) * 16) + 9)
ReqLength_B'  <=  (PEIP_Data_Out1 + 2)
a_handle_response1'  <=  PEIP_Data_Out1
}

PCI__233 -> PCI__234
{
__retval'  <=  QTail_B
QB[(QTail_B-(5*4))]'  <=   ReqLength_B
t_prime_enqueue_B'  <=  QTail_B
t_enqueue_B'  <=  QTail_B
i_enqueue_B'  <=  ChanId_B
y_enqueue_B'  <=  TransType_B
c_enqueue_B'  <=  ReqCtrl_B
s_enqueue_B'  <=  ReqSrcAddr_B
d_enqueue_B'  <=  ReqDestAddr_B
l_enqueue_B'  <=  ReqLength_B
}

PCI__234 -> PCI__235
{
__retval'  <=  0
QTail_B'  <=  (t_prime_enqueue_B + (5 * 4))
}

PCI__235 -> PCI__236
{
__retval'  <=  0
}

PCI__236 -> PCI__237
{
__retval'  <=  0
}

PCI__237 -> PCI__238
{
__retval'  <=  PEIP_CMD_Header_Out2
cmd_is_response2'  <=  PEIP_CMD_Header_Out2
}

PCI__238 -> PCL__k11
{
}

PCL__k11 | (!(0 = ((cmd_is_response2 + 3) AND (((((((1 * 2) * 2) * 2) * 2) * 2) * 2) * 2))))  -> PCI__239
{
}

PCL__k11 | (0 = ((cmd_is_response2 + 3) AND (((((((1 * 2) * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__240
{
}

PCI__239 -> PCI__240
{
}

PCI__240 -> PCL__k12
{
}

PCL__k12 | (0 = ((cmd_is_response2 + 3) AND (((((((1 * 2) * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__241
{
}

PCL__k12 | (0 /= ((cmd_is_response2 + 3) AND (((((((1 * 2) * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__242
{
}

PCI__241 -> PCI__242
{
}

PCI__242 -> PCL__k6
{
}

PCL__k6 | (IsResponse2)  -> PCI__243
{
}

PCL__k6 | (!(IsResponse2))  -> PCI__253
{
}

PCI__243 | (0 = (-1 AND ((((((4 * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__244
{
__retval'  <=  -1
ChanId_B'  <=  2
TransType_B'  <=  1
ReqCtrl_B'  <=  (((((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2) OR (((((((4 * 2) * 2) * 2) * 2) * 2) * 2) * 2)) OR 4)
ReqSrcAddr_B'  <=  PEIP_CMD_Header_Out2
ReqDestAddr_B'  <=  ((((9 + 9) * 16) + 9) * 256)
ReqLength_B'  <=  (5 * 4)
HRspFlags'  <=  (PEIP_CMD_Header_Out2 + 3)
v_handle_response2'  <=  PEIP_CMD_Header_Out2
v_prime_handle_response2'  <=  -1
}

PCI__243 | (0 /= (-1 AND ((((((4 * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__244
{
__retval'  <=  -1
ChanId_B'  <=  2
TransType_B'  <=  0
ReqCtrl_B'  <=  (((((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2) OR (((((((4 * 2) * 2) * 2) * 2) * 2) * 2) * 2)) OR 4)
ReqSrcAddr_B'  <=  PEIP_CMD_Header_Out2
ReqDestAddr_B'  <=  ((((9 + 9) * 16) + 9) * 256)
ReqLength_B'  <=  (5 * 4)
HRspFlags'  <=  (PEIP_CMD_Header_Out2 + 3)
v_handle_response2'  <=  PEIP_CMD_Header_Out2
v_prime_handle_response2'  <=  -1
}

PCI__244 -> PCI__245
{
__retval'  <=  QTail_B
QB[(QTail_B-(5*4))]'  <=   ReqLength_B
t_prime_enqueue_B'  <=  QTail_B
t_enqueue_B'  <=  QTail_B
i_enqueue_B'  <=  ChanId_B
y_enqueue_B'  <=  TransType_B
c_enqueue_B'  <=  ReqCtrl_B
s_enqueue_B'  <=  ReqSrcAddr_B
d_enqueue_B'  <=  ReqDestAddr_B
l_enqueue_B'  <=  ReqLength_B
}

PCI__245 -> PCI__246
{
__retval'  <=  0
QTail_B'  <=  (t_prime_enqueue_B + (5 * 4))
}

PCI__246 -> PCI__247
{
__retval'  <=  0
}

PCI__247 -> PCL__k14
{
}

PCL__k14 | (0 = (HRspFlags))  -> PCI__248
{
}

PCL__k14 | (0 /= (HRspFlags))  -> PCI__252
{
}

PCI__248 -> PCI__249
{
__retval'  <=  0
TransType_B'  <=  1
ReqCtrl_B'  <=  (((((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2) OR (((((((4 * 2) * 2) * 2) * 2) * 2) * 2) * 2)) OR 4)
ReqSrcAddr_B'  <=  PEIP_Data_Out2
ReqDestAddr_B'  <=  ((((9 * 256) + 9) * 16) + 9)
ReqLength_B'  <=  (PEIP_Data_Out2 + 2)
a_handle_response2'  <=  PEIP_Data_Out2
}

PCI__249 -> PCI__250
{
__retval'  <=  QTail_B
QB[(QTail_B-(5*4))]'  <=   ReqLength_B
t_prime_enqueue_B'  <=  QTail_B
t_enqueue_B'  <=  QTail_B
i_enqueue_B'  <=  ChanId_B
y_enqueue_B'  <=  TransType_B
c_enqueue_B'  <=  ReqCtrl_B
s_enqueue_B'  <=  ReqSrcAddr_B
d_enqueue_B'  <=  ReqDestAddr_B
l_enqueue_B'  <=  ReqLength_B
}

PCI__250 -> PCI__251
{
__retval'  <=  0
QTail_B'  <=  (t_prime_enqueue_B + (5 * 4))
}

PCI__251 -> PCI__252
{
__retval'  <=  0
}

PCI__252 -> PCI__253
{
__retval'  <=  0
}

PCI__253 | (0 = (DMAStatus_B AND (((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__254
{
__retval'  <=  True
b_advance_fe_to_be_queue'  <=  True
s_is_dma_available'  <=  DMAStatus_B
m_is_dma_available'  <=  (((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2)
}

PCI__253 | (0 /= (DMAStatus_B AND (((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__254
{
__retval'  <=  False
b_advance_fe_to_be_queue'  <=  False
s_is_dma_available'  <=  DMAStatus_B
m_is_dma_available'  <=  (((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2)
}

PCI__254 | (0 = (DMA_ISR_F AND 2))  -> PCI__255
{
__retval'  <=  False
b_prime_advance_fe_to_be_queue'  <=  False
v_is_dma_error'  <=  DMA_ISR_F
}

PCI__254 | (0 /= (DMA_ISR_F AND 2))  -> PCI__255
{
__retval'  <=  True
b_prime_advance_fe_to_be_queue'  <=  True
v_is_dma_error'  <=  DMA_ISR_F
}

PCI__255 -> PCI__256
{
__retval'  <=  CurrTransferValid_F
b_prime_prime_advance_fe_to_be_queue'  <=  CurrTransferValid_F
}

PCI__256 -> PCL__k15
{
b_prime_prime_advance_fe_to_be_queue'  <=  0
}

PCL__k15 | (b advance_fe_to_be_queue AND b_prime advance_fe_to_be_queue AND b_prime_prime advance_fe_to_be_queue)  -> PCI__257
{
b_prime_prime_advance_fe_to_be_queue'  <=  -1
}

PCL__k15 | (!(b advance_fe_to_be_queue) OR !(b_prime advance_fe_to_be_queue) OR !(b_prime_prime advance_fe_to_be_queue))  -> PCI__258
{
b_prime_prime_advance_fe_to_be_queue'  <=  -1
}

PCI__257 -> PCI__258
{
__retval'  <=  0
DMALength_F'  <=  ReqLength_F
b_prime_prime_advance_fe_to_be_queue'  <=  0
l_perform_dma_transfer'  <=  ReqLength_F
}

PCI__258 | (0 = (DMA_ISR_F AND 1))  -> PCI__259
{
__retval'  <=  False
b_prime_prime_advance_fe_to_be_queue'  <=  False
v_is_dma_done'  <=  DMA_ISR_F
}

PCI__258 | (0 /= (DMA_ISR_F AND 1))  -> PCI__259
{
__retval'  <=  True
b_prime_prime_advance_fe_to_be_queue'  <=  True
v_is_dma_done'  <=  DMA_ISR_F
}

PCI__259 -> PCL__k16
{
e_advance_fe_to_be_queue'  <=  0
}

PCL__k16 | (b advance_fe_to_be_queue AND !(b_prime advance_fe_to_be_queue) AND b_prime_prime advance_fe_to_be_queue AND CurrTransferValid_F)  -> PCI__260
{
e_advance_fe_to_be_queue'  <=  -1
}

PCL__k16 | (!(b advance_fe_to_be_queue) OR b_prime advance_fe_to_be_queue OR !(b_prime_prime advance_fe_to_be_queue) OR !(CurrTransferValid_F))  -> PCI__263
{
e_advance_fe_to_be_queue'  <=  -1
}

PCI__260 -> PCI__261
{
__retval'  <=  0
DMA_FDone_Msg'  <=  (((1 AND 255) <<< 16) OR -1)
e_advance_fe_to_be_queue'  <=  0
v0_advance_fe_to_be_queue'  <=  0
v_advance_fe_to_be_queue'  <=  0
v_prime_advance_fe_to_be_queue'  <=  0
v_prime_prime_advance_fe_to_be_queue'  <=  0
}

PCI__261 -> PCI__262
{
FSL_OUT'  <=  (Ack)
e_advance_fe_to_be_queue'  <=  0
}

PCI__262 -> PCI__263
{
__retval'  <=  0
CurrTransferValid_F'  <=  False
e_advance_fe_to_be_queue'  <=  0
}

PCI__263 | (QHead_F = QTail_F)  -> PCI__264
{
__retval'  <=  False
e_advance_fe_to_be_queue'  <=  False
h_not_empty_F'  <=  QHead_F
t_not_empty_F'  <=  QTail_F
}

PCI__263 | (QHead_F /= QTail_F)  -> PCI__264
{
__retval'  <=  True
e_advance_fe_to_be_queue'  <=  True
h_not_empty_F'  <=  QHead_F
t_not_empty_F'  <=  QTail_F
}

PCI__264 -> PCL__k17
{
}

PCL__k17 | (!(CurrTranfserValid_F) AND e advance_fe_to_be_queue)  -> PCI__265
{
}

PCL__k17 | (CurrTranfserValid_F OR !(e advance_fe_to_be_queue))  -> PCI__267
{
}

PCI__265 -> PCI__266
{
}

PCI__266 -> PCI__267
{
__retval'  <=  0
DMALength_F'  <=  ReqLength_F
l_perform_dma_transfer'  <=  ReqLength_F
}

PCI__267 -> PCI__268
{
__retval'  <=  0
}

PCI__268 | (0 = (DMAStatus_B AND (((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__269
{
__retval'  <=  True
s_is_dma_available'  <=  DMAStatus_B
m_is_dma_available'  <=  (((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2)
b_advance_be_to_fe_queue'  <=  True
}

PCI__268 | (0 /= (DMAStatus_B AND (((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2)))  -> PCI__269
{
__retval'  <=  False
s_is_dma_available'  <=  DMAStatus_B
m_is_dma_available'  <=  (((((((8 * 2) * 2) * 2) * 2) * 2) * 2) * 2)
b_advance_be_to_fe_queue'  <=  False
}

PCI__269 | (0 = (DMA_ISR_F AND 2))  -> PCI__270
{
__retval'  <=  False
v_is_dma_error'  <=  DMA_ISR_F
b_prime_advance_be_to_fe_queue'  <=  False
}

PCI__269 | (0 /= (DMA_ISR_F AND 2))  -> PCI__270
{
__retval'  <=  True
v_is_dma_error'  <=  DMA_ISR_F
b_prime_advance_be_to_fe_queue'  <=  True
}

PCI__270 -> PCL__k18
{
i_prime_advance_be_to_fe_queue'  <=  0
}

PCL__k18 | (b advance_be_to_fe_queue AND b_prime advance_be_to_fe_queue AND Exists_B)  -> PCI__271
{
i_prime_advance_be_to_fe_queue'  <=  -1
}

PCL__k18 | (!(b advance_be_to_fe_queue) OR !(b_prime advance_be_to_fe_queue) OR !(Exists_B))  -> PCI__272
{
i_prime_advance_be_to_fe_queue'  <=  -1
}

PCI__271 -> PCI__272
{
__retval'  <=  0
DMALength_F'  <=  ReqLength_F
l_perform_dma_transfer'  <=  ReqLength_F
i_prime_advance_be_to_fe_queue'  <=  0
}

PCI__272 -> PCL__k19
{
i_prime_advance_be_to_fe_queue'  <=  0
}

PCL__k19 | (b advance_be_to_fe_queue AND !(b_prime advance_be_to_fe_queue) AND b_prime_prime advance_be_to_fe_queue AND CurrTransferValid_F)  -> PCI__273
{
i_prime_advance_be_to_fe_queue'  <=  -1
}

PCL__k19 | (!(b advance_be_to_fe_queue) OR b_prime advance_be_to_fe_queue OR !(b_prime_prime advance_be_to_fe_queue) OR !(CurrTransferValid_F))  -> PCI__276
{
i_prime_advance_be_to_fe_queue'  <=  -1
}

PCI__273 -> PCI__274
{
__retval'  <=  0
DMALength_B'  <=  CurrTransferSize_B
DMA_BDone_Msg'  <=  (((1 AND 255) <<< 16) OR -1)
i_prime_advance_be_to_fe_queue'  <=  0
v0_advance_be_to_fe_queue'  <=  0
v_advance_be_to_fe_queue'  <=  0
v_prime_advance_be_to_fe_queue'  <=  0
v_prime_prime_advance_be_to_fe_queue'  <=  0
u_advance_be_to_fe_queue'  <=  CurrTransferSize_B
}

PCI__274 -> PCI__275
{
FSL_OUT'  <=  (Ack)
i_prime_advance_be_to_fe_queue'  <=  0
}

PCI__275 -> PCI__276
{
__retval'  <=  0
DMALength_B'  <=  (DMALength_B - CurrTransferSize_B)
i_prime_advance_be_to_fe_queue'  <=  0
w_advance_be_to_fe_queue'  <=  DMALength_B
w_prime_advance_be_to_fe_queue'  <=  CurrTransferSize_B
}

PCI__276 -> PCL__k20
{
i_prime_advance_be_to_fe_queue'  <=  0
}

PCL__k20 | (0 < (DMALength_B))  -> PCI__277
{
i_prime_advance_be_to_fe_queue'  <=  -1
}

PCL__k20 | (0 >= (DMALength_B))  -> PCI__279
{
i_prime_advance_be_to_fe_queue'  <=  -1
}

PCI__277 -> PCI__278
{
__retval'  <=  0
Ready_B'  <=  False
i_prime_advance_be_to_fe_queue'  <=  0
t_prime_prime_prime_advance_be_to_fe_queue'  <=  0
t_advance_be_to_fe_queue'  <=  0
t_prime_advance_be_to_fe_queue'  <=  0
t_prime_prime_advance_be_to_fe_queue'  <=  0
}

PCI__278 -> PCI__279
{
FSL_OUT'  <=  (Ack)
i_prime_advance_be_to_fe_queue'  <=  0
}

PCI__279 -> PCL__k21
{
i_prime_advance_be_to_fe_queue'  <=  0
}

PCL__k21 | ((( ! (0 < (DMALength_B))) AND 1) = (TransType_B))  -> PCI__280
{
i_prime_advance_be_to_fe_queue'  <=  -1
}

PCL__k21 | ((( ! (0 < (DMALength_B))) AND 1) /= (TransType_B))  -> PCI__281
{
i_prime_advance_be_to_fe_queue'  <=  -1
}

PCI__280 -> PCI__281
{
__retval'  <=  ChanId_B
Exists_B'  <=  False
i_prime_advance_be_to_fe_queue'  <=  ChanId_B
i_advance_be_to_fe_queue'  <=  ChanId_B
}

PCI__281 -> PCL__k22
{
e_advance_be_to_fe_queue'  <=  0
}

PCL__k22 | (((( ! (0 < (DMALength_B))) AND (1 = (TransType_B))) AND 1) = i_prime_advance_be_to_fe_queue)  -> PCI__282
{
e_advance_be_to_fe_queue'  <=  -1
}

PCL__k22 | (((( ! (0 < (DMALength_B))) AND (1 = (TransType_B))) AND 1) /= i_prime_advance_be_to_fe_queue)  -> PCI__285
{
e_advance_be_to_fe_queue'  <=  -1
}

PCI__282 -> PCI__283
{
e_advance_be_to_fe_queue'  <=  0
a_advance_be_to_fe_queue'  <=  0
}

PCI__283 -> PCI__284
{
e_advance_be_to_fe_queue'  <=  0
a_prime_advance_be_to_fe_queue'  <=  0
}

PCI__284 -> PCI__285
{
e_advance_be_to_fe_queue'  <=  0
}

PCI__285 -> PCL__k23
{
e_advance_be_to_fe_queue'  <=  0
}

PCL__k23 | (((( ! (0 < (DMALength_B))) AND (1 = (TransType_B))) AND 2) = i_prime_advance_be_to_fe_queue)  -> PCI__286
{
e_advance_be_to_fe_queue'  <=  -1
}

PCL__k23 | (((( ! (0 < (DMALength_B))) AND (1 = (TransType_B))) AND 2) /= i_prime_advance_be_to_fe_queue)  -> PCI__289
{
e_advance_be_to_fe_queue'  <=  -1
}

PCI__286 -> PCI__287
{
e_advance_be_to_fe_queue'  <=  0
a_advance_be_to_fe_queue'  <=  0
}

PCI__287 -> PCI__288
{
e_advance_be_to_fe_queue'  <=  0
a_prime_advance_be_to_fe_queue'  <=  0
}

PCI__288 -> PCI__289
{
e_advance_be_to_fe_queue'  <=  0
}

PCI__289 -> PCL__k24
{
}

PCL__k24 | (!(0 = ((Exists_B) AND e_advance_be_to_fe_queue)))  -> PCI__290
{
}

PCL__k24 | (0 = ((Exists_B) AND e_advance_be_to_fe_queue))  -> PCI__292
{
}

PCI__290 -> PCI__291
{
__retval'  <=  0
Exists_B'  <=  True
m_prime_prime_prime_advance_be_to_fe_queue'  <=  0
m_advance_be_to_fe_queue'  <=  0
m_prime_advance_be_to_fe_queue'  <=  0
m_prime_prime_advance_be_to_fe_queue'  <=  0
}

PCI__291 -> PCI__292
{
FSL_OUT'  <=  (Ack)
}

PCI__292 -> PCI__293
{
__retval'  <=  0
}

PCI__293 -> PCI__294
{
__retval'  <=  0
}

PCI__294 -> PCI__295
{
__retval'  <=  0
}

PCI__295 -> PCI__296
{
__retval'  <=  0
}



-- END OF GENERATED CODE --
